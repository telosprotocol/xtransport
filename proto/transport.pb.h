// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transport.proto

#ifndef PROTOBUF_INCLUDED_transport_2eproto
#define PROTOBUF_INCLUDED_transport_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_transport_2eproto 

namespace protobuf_transport_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[6];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_transport_2eproto
namespace top {
namespace transport {
namespace protobuf {
class GossipParams;
class GossipParamsDefaultTypeInternal;
extern GossipParamsDefaultTypeInternal _GossipParams_default_instance_;
class GossipSyncBlockData;
class GossipSyncBlockDataDefaultTypeInternal;
extern GossipSyncBlockDataDefaultTypeInternal _GossipSyncBlockData_default_instance_;
class HopInfo;
class HopInfoDefaultTypeInternal;
extern HopInfoDefaultTypeInternal _HopInfo_default_instance_;
class RelayHopInfo;
class RelayHopInfoDefaultTypeInternal;
extern RelayHopInfoDefaultTypeInternal _RelayHopInfo_default_instance_;
class RoutingMessage;
class RoutingMessageDefaultTypeInternal;
extern RoutingMessageDefaultTypeInternal _RoutingMessage_default_instance_;
class VersionTag;
class VersionTagDefaultTypeInternal;
extern VersionTagDefaultTypeInternal _VersionTag_default_instance_;
}  // namespace protobuf
}  // namespace transport
}  // namespace top
namespace google {
namespace protobuf {
template<> ::top::transport::protobuf::GossipParams* Arena::CreateMaybeMessage<::top::transport::protobuf::GossipParams>(Arena*);
template<> ::top::transport::protobuf::GossipSyncBlockData* Arena::CreateMaybeMessage<::top::transport::protobuf::GossipSyncBlockData>(Arena*);
template<> ::top::transport::protobuf::HopInfo* Arena::CreateMaybeMessage<::top::transport::protobuf::HopInfo>(Arena*);
template<> ::top::transport::protobuf::RelayHopInfo* Arena::CreateMaybeMessage<::top::transport::protobuf::RelayHopInfo>(Arena*);
template<> ::top::transport::protobuf::RoutingMessage* Arena::CreateMaybeMessage<::top::transport::protobuf::RoutingMessage>(Arena*);
template<> ::top::transport::protobuf::VersionTag* Arena::CreateMaybeMessage<::top::transport::protobuf::VersionTag>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace top {
namespace transport {
namespace protobuf {

// ===================================================================

class HopInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:top.transport.protobuf.HopInfo) */ {
 public:
  HopInfo();
  virtual ~HopInfo();

  HopInfo(const HopInfo& from);

  inline HopInfo& operator=(const HopInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HopInfo(HopInfo&& from) noexcept
    : HopInfo() {
    *this = ::std::move(from);
  }

  inline HopInfo& operator=(HopInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HopInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HopInfo* internal_default_instance() {
    return reinterpret_cast<const HopInfo*>(
               &_HopInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(HopInfo* other);
  friend void swap(HopInfo& a, HopInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HopInfo* New() const final {
    return CreateMaybeMessage<HopInfo>(NULL);
  }

  HopInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HopInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const HopInfo& from);
  void MergeFrom(const HopInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HopInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes node_id = 1;
  bool has_node_id() const;
  void clear_node_id();
  static const int kNodeIdFieldNumber = 1;
  const ::std::string& node_id() const;
  void set_node_id(const ::std::string& value);
  #if LANG_CXX11
  void set_node_id(::std::string&& value);
  #endif
  void set_node_id(const char* value);
  void set_node_id(const void* value, size_t size);
  ::std::string* mutable_node_id();
  ::std::string* release_node_id();
  void set_allocated_node_id(::std::string* node_id);

  // optional bytes ip = 2;
  bool has_ip() const;
  void clear_ip();
  static const int kIpFieldNumber = 2;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_ip(::std::string&& value);
  #endif
  void set_ip(const char* value);
  void set_ip(const void* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // optional int32 port = 3;
  bool has_port() const;
  void clear_port();
  static const int kPortFieldNumber = 3;
  ::google::protobuf::int32 port() const;
  void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:top.transport.protobuf.HopInfo)
 private:
  void set_has_node_id();
  void clear_has_node_id();
  void set_has_ip();
  void clear_has_ip();
  void set_has_port();
  void clear_has_port();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr node_id_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::google::protobuf::int32 port_;
  friend struct ::protobuf_transport_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VersionTag : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:top.transport.protobuf.VersionTag) */ {
 public:
  VersionTag();
  virtual ~VersionTag();

  VersionTag(const VersionTag& from);

  inline VersionTag& operator=(const VersionTag& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VersionTag(VersionTag&& from) noexcept
    : VersionTag() {
    *this = ::std::move(from);
  }

  inline VersionTag& operator=(VersionTag&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VersionTag& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VersionTag* internal_default_instance() {
    return reinterpret_cast<const VersionTag*>(
               &_VersionTag_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(VersionTag* other);
  friend void swap(VersionTag& a, VersionTag& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VersionTag* New() const final {
    return CreateMaybeMessage<VersionTag>(NULL);
  }

  VersionTag* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VersionTag>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VersionTag& from);
  void MergeFrom(const VersionTag& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VersionTag* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes version = 1;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  #if LANG_CXX11
  void set_version(::std::string&& value);
  #endif
  void set_version(const char* value);
  void set_version(const void* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // optional bytes copyright = 2;
  bool has_copyright() const;
  void clear_copyright();
  static const int kCopyrightFieldNumber = 2;
  const ::std::string& copyright() const;
  void set_copyright(const ::std::string& value);
  #if LANG_CXX11
  void set_copyright(::std::string&& value);
  #endif
  void set_copyright(const char* value);
  void set_copyright(const void* value, size_t size);
  ::std::string* mutable_copyright();
  ::std::string* release_copyright();
  void set_allocated_copyright(::std::string* copyright);

  // @@protoc_insertion_point(class_scope:top.transport.protobuf.VersionTag)
 private:
  void set_has_version();
  void clear_has_version();
  void set_has_copyright();
  void clear_has_copyright();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  ::google::protobuf::internal::ArenaStringPtr copyright_;
  friend struct ::protobuf_transport_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RelayHopInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:top.transport.protobuf.RelayHopInfo) */ {
 public:
  RelayHopInfo();
  virtual ~RelayHopInfo();

  RelayHopInfo(const RelayHopInfo& from);

  inline RelayHopInfo& operator=(const RelayHopInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RelayHopInfo(RelayHopInfo&& from) noexcept
    : RelayHopInfo() {
    *this = ::std::move(from);
  }

  inline RelayHopInfo& operator=(RelayHopInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RelayHopInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RelayHopInfo* internal_default_instance() {
    return reinterpret_cast<const RelayHopInfo*>(
               &_RelayHopInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(RelayHopInfo* other);
  friend void swap(RelayHopInfo& a, RelayHopInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RelayHopInfo* New() const final {
    return CreateMaybeMessage<RelayHopInfo>(NULL);
  }

  RelayHopInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RelayHopInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RelayHopInfo& from);
  void MergeFrom(const RelayHopInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RelayHopInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes relay_entry_id = 1;
  bool has_relay_entry_id() const;
  void clear_relay_entry_id();
  static const int kRelayEntryIdFieldNumber = 1;
  const ::std::string& relay_entry_id() const;
  void set_relay_entry_id(const ::std::string& value);
  #if LANG_CXX11
  void set_relay_entry_id(::std::string&& value);
  #endif
  void set_relay_entry_id(const char* value);
  void set_relay_entry_id(const void* value, size_t size);
  ::std::string* mutable_relay_entry_id();
  ::std::string* release_relay_entry_id();
  void set_allocated_relay_entry_id(::std::string* relay_entry_id);

  // optional bytes relay_exit_id = 4;
  bool has_relay_exit_id() const;
  void clear_relay_exit_id();
  static const int kRelayExitIdFieldNumber = 4;
  const ::std::string& relay_exit_id() const;
  void set_relay_exit_id(const ::std::string& value);
  #if LANG_CXX11
  void set_relay_exit_id(::std::string&& value);
  #endif
  void set_relay_exit_id(const char* value);
  void set_relay_exit_id(const void* value, size_t size);
  ::std::string* mutable_relay_exit_id();
  ::std::string* release_relay_exit_id();
  void set_allocated_relay_exit_id(::std::string* relay_exit_id);

  // optional uint64 service_type = 2;
  bool has_service_type() const;
  void clear_service_type();
  static const int kServiceTypeFieldNumber = 2;
  ::google::protobuf::uint64 service_type() const;
  void set_service_type(::google::protobuf::uint64 value);

  // optional bool relay_flag = 3;
  bool has_relay_flag() const;
  void clear_relay_flag();
  static const int kRelayFlagFieldNumber = 3;
  bool relay_flag() const;
  void set_relay_flag(bool value);

  // @@protoc_insertion_point(class_scope:top.transport.protobuf.RelayHopInfo)
 private:
  void set_has_relay_entry_id();
  void clear_has_relay_entry_id();
  void set_has_service_type();
  void clear_has_service_type();
  void set_has_relay_flag();
  void clear_has_relay_flag();
  void set_has_relay_exit_id();
  void clear_has_relay_exit_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr relay_entry_id_;
  ::google::protobuf::internal::ArenaStringPtr relay_exit_id_;
  ::google::protobuf::uint64 service_type_;
  bool relay_flag_;
  friend struct ::protobuf_transport_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GossipParams : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:top.transport.protobuf.GossipParams) */ {
 public:
  GossipParams();
  virtual ~GossipParams();

  GossipParams(const GossipParams& from);

  inline GossipParams& operator=(const GossipParams& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GossipParams(GossipParams&& from) noexcept
    : GossipParams() {
    *this = ::std::move(from);
  }

  inline GossipParams& operator=(GossipParams&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GossipParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GossipParams* internal_default_instance() {
    return reinterpret_cast<const GossipParams*>(
               &_GossipParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(GossipParams* other);
  friend void swap(GossipParams& a, GossipParams& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GossipParams* New() const final {
    return CreateMaybeMessage<GossipParams>(NULL);
  }

  GossipParams* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GossipParams>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GossipParams& from);
  void MergeFrom(const GossipParams& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GossipParams* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 pass_node = 18;
  int pass_node_size() const;
  void clear_pass_node();
  static const int kPassNodeFieldNumber = 18;
  ::google::protobuf::uint32 pass_node(int index) const;
  void set_pass_node(int index, ::google::protobuf::uint32 value);
  void add_pass_node(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      pass_node() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_pass_node();

  // optional bytes header_hash = 14;
  bool has_header_hash() const;
  void clear_header_hash();
  static const int kHeaderHashFieldNumber = 14;
  const ::std::string& header_hash() const;
  void set_header_hash(const ::std::string& value);
  #if LANG_CXX11
  void set_header_hash(::std::string&& value);
  #endif
  void set_header_hash(const char* value);
  void set_header_hash(const void* value, size_t size);
  ::std::string* mutable_header_hash();
  ::std::string* release_header_hash();
  void set_allocated_header_hash(::std::string* header_hash);

  // optional bytes block = 15;
  bool has_block() const;
  void clear_block();
  static const int kBlockFieldNumber = 15;
  const ::std::string& block() const;
  void set_block(const ::std::string& value);
  #if LANG_CXX11
  void set_block(::std::string&& value);
  #endif
  void set_block(const char* value);
  void set_block(const void* value, size_t size);
  ::std::string* mutable_block();
  ::std::string* release_block();
  void set_allocated_block(::std::string* block);

  // optional bytes pre_ip = 20;
  bool has_pre_ip() const;
  void clear_pre_ip();
  static const int kPreIpFieldNumber = 20;
  const ::std::string& pre_ip() const;
  void set_pre_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_pre_ip(::std::string&& value);
  #endif
  void set_pre_ip(const char* value);
  void set_pre_ip(const void* value, size_t size);
  ::std::string* mutable_pre_ip();
  ::std::string* release_pre_ip();
  void set_allocated_pre_ip(::std::string* pre_ip);

  // optional int32 reliable_level = 1;
  bool has_reliable_level() const;
  void clear_reliable_level();
  static const int kReliableLevelFieldNumber = 1;
  ::google::protobuf::int32 reliable_level() const;
  void set_reliable_level(::google::protobuf::int32 value);

  // optional uint32 neighber_count = 2;
  bool has_neighber_count() const;
  void clear_neighber_count();
  static const int kNeighberCountFieldNumber = 2;
  ::google::protobuf::uint32 neighber_count() const;
  void set_neighber_count(::google::protobuf::uint32 value);

  // optional uint32 stop_times = 3;
  bool has_stop_times() const;
  void clear_stop_times();
  static const int kStopTimesFieldNumber = 3;
  ::google::protobuf::uint32 stop_times() const;
  void set_stop_times(::google::protobuf::uint32 value);

  // optional int32 gossip_type = 4;
  bool has_gossip_type() const;
  void clear_gossip_type();
  static const int kGossipTypeFieldNumber = 4;
  ::google::protobuf::int32 gossip_type() const;
  void set_gossip_type(::google::protobuf::int32 value);

  // optional int32 evil_rate = 5;
  bool has_evil_rate() const;
  void clear_evil_rate();
  static const int kEvilRateFieldNumber = 5;
  ::google::protobuf::int32 evil_rate() const;
  void set_evil_rate(::google::protobuf::int32 value);

  // optional uint32 max_hop_num = 6;
  bool has_max_hop_num() const;
  void clear_max_hop_num();
  static const int kMaxHopNumFieldNumber = 6;
  ::google::protobuf::uint32 max_hop_num() const;
  void set_max_hop_num(::google::protobuf::uint32 value);

  // optional uint64 min_dis = 7;
  bool has_min_dis() const;
  void clear_min_dis();
  static const int kMinDisFieldNumber = 7;
  ::google::protobuf::uint64 min_dis() const;
  void set_min_dis(::google::protobuf::uint64 value);

  // optional uint64 max_dis = 8;
  bool has_max_dis() const;
  void clear_max_dis();
  static const int kMaxDisFieldNumber = 8;
  ::google::protobuf::uint64 max_dis() const;
  void set_max_dis(::google::protobuf::uint64 value);

  // optional uint64 left_min = 9;
  bool has_left_min() const;
  void clear_left_min();
  static const int kLeftMinFieldNumber = 9;
  ::google::protobuf::uint64 left_min() const;
  void set_left_min(::google::protobuf::uint64 value);

  // optional uint64 right_max = 10;
  bool has_right_max() const;
  void clear_right_max();
  static const int kRightMaxFieldNumber = 10;
  ::google::protobuf::uint64 right_max() const;
  void set_right_max(::google::protobuf::uint64 value);

  // optional uint32 left_overlap = 11;
  bool has_left_overlap() const;
  void clear_left_overlap();
  static const int kLeftOverlapFieldNumber = 11;
  ::google::protobuf::uint32 left_overlap() const;
  void set_left_overlap(::google::protobuf::uint32 value);

  // optional uint32 right_overlap = 12;
  bool has_right_overlap() const;
  void clear_right_overlap();
  static const int kRightOverlapFieldNumber = 12;
  ::google::protobuf::uint32 right_overlap() const;
  void set_right_overlap(::google::protobuf::uint32 value);

  // optional uint32 switch_layer_hop_num = 13;
  bool has_switch_layer_hop_num() const;
  void clear_switch_layer_hop_num();
  static const int kSwitchLayerHopNumFieldNumber = 13;
  ::google::protobuf::uint32 switch_layer_hop_num() const;
  void set_switch_layer_hop_num(::google::protobuf::uint32 value);

  // optional uint32 ign_bloomfilter_level = 16;
  bool has_ign_bloomfilter_level() const;
  void clear_ign_bloomfilter_level();
  static const int kIgnBloomfilterLevelFieldNumber = 16;
  ::google::protobuf::uint32 ign_bloomfilter_level() const;
  void set_ign_bloomfilter_level(::google::protobuf::uint32 value);

  // optional bool diff_net = 17;
  bool has_diff_net() const;
  void clear_diff_net();
  static const int kDiffNetFieldNumber = 17;
  bool diff_net() const;
  void set_diff_net(bool value);

  // optional uint32 msg_hash = 19;
  bool has_msg_hash() const;
  void clear_msg_hash();
  static const int kMsgHashFieldNumber = 19;
  ::google::protobuf::uint32 msg_hash() const;
  void set_msg_hash(::google::protobuf::uint32 value);

  // optional int32 pre_port = 21;
  bool has_pre_port() const;
  void clear_pre_port();
  static const int kPrePortFieldNumber = 21;
  ::google::protobuf::int32 pre_port() const;
  void set_pre_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:top.transport.protobuf.GossipParams)
 private:
  void set_has_reliable_level();
  void clear_has_reliable_level();
  void set_has_neighber_count();
  void clear_has_neighber_count();
  void set_has_stop_times();
  void clear_has_stop_times();
  void set_has_gossip_type();
  void clear_has_gossip_type();
  void set_has_evil_rate();
  void clear_has_evil_rate();
  void set_has_max_hop_num();
  void clear_has_max_hop_num();
  void set_has_min_dis();
  void clear_has_min_dis();
  void set_has_max_dis();
  void clear_has_max_dis();
  void set_has_left_min();
  void clear_has_left_min();
  void set_has_right_max();
  void clear_has_right_max();
  void set_has_left_overlap();
  void clear_has_left_overlap();
  void set_has_right_overlap();
  void clear_has_right_overlap();
  void set_has_switch_layer_hop_num();
  void clear_has_switch_layer_hop_num();
  void set_has_header_hash();
  void clear_has_header_hash();
  void set_has_block();
  void clear_has_block();
  void set_has_ign_bloomfilter_level();
  void clear_has_ign_bloomfilter_level();
  void set_has_diff_net();
  void clear_has_diff_net();
  void set_has_msg_hash();
  void clear_has_msg_hash();
  void set_has_pre_ip();
  void clear_has_pre_ip();
  void set_has_pre_port();
  void clear_has_pre_port();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > pass_node_;
  ::google::protobuf::internal::ArenaStringPtr header_hash_;
  ::google::protobuf::internal::ArenaStringPtr block_;
  ::google::protobuf::internal::ArenaStringPtr pre_ip_;
  ::google::protobuf::int32 reliable_level_;
  ::google::protobuf::uint32 neighber_count_;
  ::google::protobuf::uint32 stop_times_;
  ::google::protobuf::int32 gossip_type_;
  ::google::protobuf::int32 evil_rate_;
  ::google::protobuf::uint32 max_hop_num_;
  ::google::protobuf::uint64 min_dis_;
  ::google::protobuf::uint64 max_dis_;
  ::google::protobuf::uint64 left_min_;
  ::google::protobuf::uint64 right_max_;
  ::google::protobuf::uint32 left_overlap_;
  ::google::protobuf::uint32 right_overlap_;
  ::google::protobuf::uint32 switch_layer_hop_num_;
  ::google::protobuf::uint32 ign_bloomfilter_level_;
  bool diff_net_;
  ::google::protobuf::uint32 msg_hash_;
  ::google::protobuf::int32 pre_port_;
  friend struct ::protobuf_transport_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GossipSyncBlockData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:top.transport.protobuf.GossipSyncBlockData) */ {
 public:
  GossipSyncBlockData();
  virtual ~GossipSyncBlockData();

  GossipSyncBlockData(const GossipSyncBlockData& from);

  inline GossipSyncBlockData& operator=(const GossipSyncBlockData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GossipSyncBlockData(GossipSyncBlockData&& from) noexcept
    : GossipSyncBlockData() {
    *this = ::std::move(from);
  }

  inline GossipSyncBlockData& operator=(GossipSyncBlockData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GossipSyncBlockData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GossipSyncBlockData* internal_default_instance() {
    return reinterpret_cast<const GossipSyncBlockData*>(
               &_GossipSyncBlockData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(GossipSyncBlockData* other);
  friend void swap(GossipSyncBlockData& a, GossipSyncBlockData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GossipSyncBlockData* New() const final {
    return CreateMaybeMessage<GossipSyncBlockData>(NULL);
  }

  GossipSyncBlockData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GossipSyncBlockData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GossipSyncBlockData& from);
  void MergeFrom(const GossipSyncBlockData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GossipSyncBlockData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes header_hash = 1;
  bool has_header_hash() const;
  void clear_header_hash();
  static const int kHeaderHashFieldNumber = 1;
  const ::std::string& header_hash() const;
  void set_header_hash(const ::std::string& value);
  #if LANG_CXX11
  void set_header_hash(::std::string&& value);
  #endif
  void set_header_hash(const char* value);
  void set_header_hash(const void* value, size_t size);
  ::std::string* mutable_header_hash();
  ::std::string* release_header_hash();
  void set_allocated_header_hash(::std::string* header_hash);

  // optional bytes block = 2;
  bool has_block() const;
  void clear_block();
  static const int kBlockFieldNumber = 2;
  const ::std::string& block() const;
  void set_block(const ::std::string& value);
  #if LANG_CXX11
  void set_block(::std::string&& value);
  #endif
  void set_block(const char* value);
  void set_block(const void* value, size_t size);
  ::std::string* mutable_block();
  ::std::string* release_block();
  void set_allocated_block(::std::string* block);

  // @@protoc_insertion_point(class_scope:top.transport.protobuf.GossipSyncBlockData)
 private:
  void set_has_header_hash();
  void clear_has_header_hash();
  void set_has_block();
  void clear_has_block();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr header_hash_;
  ::google::protobuf::internal::ArenaStringPtr block_;
  friend struct ::protobuf_transport_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RoutingMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:top.transport.protobuf.RoutingMessage) */ {
 public:
  RoutingMessage();
  virtual ~RoutingMessage();

  RoutingMessage(const RoutingMessage& from);

  inline RoutingMessage& operator=(const RoutingMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RoutingMessage(RoutingMessage&& from) noexcept
    : RoutingMessage() {
    *this = ::std::move(from);
  }

  inline RoutingMessage& operator=(RoutingMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoutingMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoutingMessage* internal_default_instance() {
    return reinterpret_cast<const RoutingMessage*>(
               &_RoutingMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(RoutingMessage* other);
  friend void swap(RoutingMessage& a, RoutingMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RoutingMessage* New() const final {
    return CreateMaybeMessage<RoutingMessage>(NULL);
  }

  RoutingMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RoutingMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RoutingMessage& from);
  void MergeFrom(const RoutingMessage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoutingMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .top.transport.protobuf.HopInfo hop_nodes = 8;
  int hop_nodes_size() const;
  void clear_hop_nodes();
  static const int kHopNodesFieldNumber = 8;
  ::top::transport::protobuf::HopInfo* mutable_hop_nodes(int index);
  ::google::protobuf::RepeatedPtrField< ::top::transport::protobuf::HopInfo >*
      mutable_hop_nodes();
  const ::top::transport::protobuf::HopInfo& hop_nodes(int index) const;
  ::top::transport::protobuf::HopInfo* add_hop_nodes();
  const ::google::protobuf::RepeatedPtrField< ::top::transport::protobuf::HopInfo >&
      hop_nodes() const;

  // repeated uint64 bloomfilter = 20;
  int bloomfilter_size() const;
  void clear_bloomfilter();
  static const int kBloomfilterFieldNumber = 20;
  ::google::protobuf::uint64 bloomfilter(int index) const;
  void set_bloomfilter(int index, ::google::protobuf::uint64 value);
  void add_bloomfilter(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      bloomfilter() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_bloomfilter();

  // repeated .top.transport.protobuf.RelayHopInfo relay_hop_info = 21;
  int relay_hop_info_size() const;
  void clear_relay_hop_info();
  static const int kRelayHopInfoFieldNumber = 21;
  ::top::transport::protobuf::RelayHopInfo* mutable_relay_hop_info(int index);
  ::google::protobuf::RepeatedPtrField< ::top::transport::protobuf::RelayHopInfo >*
      mutable_relay_hop_info();
  const ::top::transport::protobuf::RelayHopInfo& relay_hop_info(int index) const;
  ::top::transport::protobuf::RelayHopInfo* add_relay_hop_info();
  const ::google::protobuf::RepeatedPtrField< ::top::transport::protobuf::RelayHopInfo >&
      relay_hop_info() const;

  // repeated bytes trace_route = 25;
  int trace_route_size() const;
  void clear_trace_route();
  static const int kTraceRouteFieldNumber = 25;
  const ::std::string& trace_route(int index) const;
  ::std::string* mutable_trace_route(int index);
  void set_trace_route(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_trace_route(int index, ::std::string&& value);
  #endif
  void set_trace_route(int index, const char* value);
  void set_trace_route(int index, const void* value, size_t size);
  ::std::string* add_trace_route();
  void add_trace_route(const ::std::string& value);
  #if LANG_CXX11
  void add_trace_route(::std::string&& value);
  #endif
  void add_trace_route(const char* value);
  void add_trace_route(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& trace_route() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_trace_route();

  // optional bytes src_node_id = 1;
  bool has_src_node_id() const;
  void clear_src_node_id();
  static const int kSrcNodeIdFieldNumber = 1;
  const ::std::string& src_node_id() const;
  void set_src_node_id(const ::std::string& value);
  #if LANG_CXX11
  void set_src_node_id(::std::string&& value);
  #endif
  void set_src_node_id(const char* value);
  void set_src_node_id(const void* value, size_t size);
  ::std::string* mutable_src_node_id();
  ::std::string* release_src_node_id();
  void set_allocated_src_node_id(::std::string* src_node_id);

  // optional bytes des_node_id = 2;
  bool has_des_node_id() const;
  void clear_des_node_id();
  static const int kDesNodeIdFieldNumber = 2;
  const ::std::string& des_node_id() const;
  void set_des_node_id(const ::std::string& value);
  #if LANG_CXX11
  void set_des_node_id(::std::string&& value);
  #endif
  void set_des_node_id(const char* value);
  void set_des_node_id(const void* value, size_t size);
  ::std::string* mutable_des_node_id();
  ::std::string* release_des_node_id();
  void set_allocated_des_node_id(::std::string* des_node_id);

  // optional bytes data = 4;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 4;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // optional bytes client_id = 13;
  bool has_client_id() const;
  void clear_client_id();
  static const int kClientIdFieldNumber = 13;
  const ::std::string& client_id() const;
  void set_client_id(const ::std::string& value);
  #if LANG_CXX11
  void set_client_id(::std::string&& value);
  #endif
  void set_client_id(const char* value);
  void set_client_id(const void* value, size_t size);
  ::std::string* mutable_client_id();
  ::std::string* release_client_id();
  void set_allocated_client_id(::std::string* client_id);

  // optional bytes xrequest_id = 24;
  bool has_xrequest_id() const;
  void clear_xrequest_id();
  static const int kXrequestIdFieldNumber = 24;
  const ::std::string& xrequest_id() const;
  void set_xrequest_id(const ::std::string& value);
  #if LANG_CXX11
  void set_xrequest_id(::std::string&& value);
  #endif
  void set_xrequest_id(const char* value);
  void set_xrequest_id(const void* value, size_t size);
  ::std::string* mutable_xrequest_id();
  ::std::string* release_xrequest_id();
  void set_allocated_xrequest_id(::std::string* xrequest_id);

  // optional bytes xid = 26;
  bool has_xid() const;
  void clear_xid();
  static const int kXidFieldNumber = 26;
  const ::std::string& xid() const;
  void set_xid(const ::std::string& value);
  #if LANG_CXX11
  void set_xid(::std::string&& value);
  #endif
  void set_xid(const char* value);
  void set_xid(const void* value, size_t size);
  ::std::string* mutable_xid();
  ::std::string* release_xid();
  void set_allocated_xid(::std::string* xid);

  // optional string debug = 31;
  bool has_debug() const;
  void clear_debug();
  static const int kDebugFieldNumber = 31;
  const ::std::string& debug() const;
  void set_debug(const ::std::string& value);
  #if LANG_CXX11
  void set_debug(::std::string&& value);
  #endif
  void set_debug(const char* value);
  void set_debug(const char* value, size_t size);
  ::std::string* mutable_debug();
  ::std::string* release_debug();
  void set_allocated_debug(::std::string* debug);

  // optional .top.transport.protobuf.VersionTag version_tag = 18;
  bool has_version_tag() const;
  void clear_version_tag();
  static const int kVersionTagFieldNumber = 18;
  private:
  const ::top::transport::protobuf::VersionTag& _internal_version_tag() const;
  public:
  const ::top::transport::protobuf::VersionTag& version_tag() const;
  ::top::transport::protobuf::VersionTag* release_version_tag();
  ::top::transport::protobuf::VersionTag* mutable_version_tag();
  void set_allocated_version_tag(::top::transport::protobuf::VersionTag* version_tag);

  // optional .top.transport.protobuf.GossipParams gossip = 29;
  bool has_gossip() const;
  void clear_gossip();
  static const int kGossipFieldNumber = 29;
  private:
  const ::top::transport::protobuf::GossipParams& _internal_gossip() const;
  public:
  const ::top::transport::protobuf::GossipParams& gossip() const;
  ::top::transport::protobuf::GossipParams* release_gossip();
  ::top::transport::protobuf::GossipParams* mutable_gossip();
  void set_allocated_gossip(::top::transport::protobuf::GossipParams* gossip);

  // optional int32 type = 3;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // optional uint32 id = 5;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 5;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // optional uint32 ack_id = 6;
  bool has_ack_id() const;
  void clear_ack_id();
  static const int kAckIdFieldNumber = 6;
  ::google::protobuf::uint32 ack_id() const;
  void set_ack_id(::google::protobuf::uint32 value);

  // optional uint32 hop_num = 7;
  bool has_hop_num() const;
  void clear_hop_num();
  static const int kHopNumFieldNumber = 7;
  ::google::protobuf::uint32 hop_num() const;
  void set_hop_num(::google::protobuf::uint32 value);

  // optional int32 retry = 9;
  bool has_retry() const;
  void clear_retry();
  static const int kRetryFieldNumber = 9;
  ::google::protobuf::int32 retry() const;
  void set_retry(::google::protobuf::int32 value);

  // optional bool client_msg = 10;
  bool has_client_msg() const;
  void clear_client_msg();
  static const int kClientMsgFieldNumber = 10;
  bool client_msg() const;
  void set_client_msg(bool value);

  // optional bool relay_flag = 11;
  bool has_relay_flag() const;
  void clear_relay_flag();
  static const int kRelayFlagFieldNumber = 11;
  bool relay_flag() const;
  void set_relay_flag(bool value);

  // optional bool request_type = 12;
  bool has_request_type() const;
  void clear_request_type();
  static const int kRequestTypeFieldNumber = 12;
  bool request_type() const;
  void set_request_type(bool value);

  // optional bool direct_mode = 14;
  bool has_direct_mode() const;
  void clear_direct_mode();
  static const int kDirectModeFieldNumber = 14;
  bool direct_mode() const;
  void set_direct_mode(bool value);

  // optional uint64 src_service_type = 15;
  bool has_src_service_type() const;
  void clear_src_service_type();
  static const int kSrcServiceTypeFieldNumber = 15;
  ::google::protobuf::uint64 src_service_type() const;
  void set_src_service_type(::google::protobuf::uint64 value);

  // optional uint64 des_service_type = 16;
  bool has_des_service_type() const;
  void clear_des_service_type();
  static const int kDesServiceTypeFieldNumber = 16;
  ::google::protobuf::uint64 des_service_type() const;
  void set_des_service_type(::google::protobuf::uint64 value);

  // optional uint32 status = 17;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 17;
  ::google::protobuf::uint32 status() const;
  void set_status(::google::protobuf::uint32 value);

  // optional uint32 seq = 23;
  bool has_seq() const;
  void clear_seq();
  static const int kSeqFieldNumber = 23;
  ::google::protobuf::uint32 seq() const;
  void set_seq(::google::protobuf::uint32 value);

  // optional bool is_root = 19;
  bool has_is_root() const;
  void clear_is_root();
  static const int kIsRootFieldNumber = 19;
  bool is_root() const;
  void set_is_root(bool value);

  // optional bool multi_relay = 22;
  bool has_multi_relay() const;
  void clear_multi_relay();
  static const int kMultiRelayFieldNumber = 22;
  bool multi_relay() const;
  void set_multi_relay(bool value);

  // optional bool broadcast = 27;
  bool has_broadcast() const;
  void clear_broadcast();
  static const int kBroadcastFieldNumber = 27;
  bool broadcast() const;
  void set_broadcast(bool value);

  // optional bool enable_ack = 30;
  bool has_enable_ack() const;
  void clear_enable_ack();
  static const int kEnableAckFieldNumber = 30;
  bool enable_ack() const;
  void set_enable_ack(bool value);

  // optional uint32 priority = 28;
  bool has_priority() const;
  void clear_priority();
  static const int kPriorityFieldNumber = 28;
  ::google::protobuf::uint32 priority() const;
  void set_priority(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:top.transport.protobuf.RoutingMessage)
 private:
  void set_has_src_node_id();
  void clear_has_src_node_id();
  void set_has_des_node_id();
  void clear_has_des_node_id();
  void set_has_type();
  void clear_has_type();
  void set_has_data();
  void clear_has_data();
  void set_has_id();
  void clear_has_id();
  void set_has_ack_id();
  void clear_has_ack_id();
  void set_has_hop_num();
  void clear_has_hop_num();
  void set_has_retry();
  void clear_has_retry();
  void set_has_client_msg();
  void clear_has_client_msg();
  void set_has_relay_flag();
  void clear_has_relay_flag();
  void set_has_request_type();
  void clear_has_request_type();
  void set_has_client_id();
  void clear_has_client_id();
  void set_has_direct_mode();
  void clear_has_direct_mode();
  void set_has_src_service_type();
  void clear_has_src_service_type();
  void set_has_des_service_type();
  void clear_has_des_service_type();
  void set_has_status();
  void clear_has_status();
  void set_has_version_tag();
  void clear_has_version_tag();
  void set_has_is_root();
  void clear_has_is_root();
  void set_has_multi_relay();
  void clear_has_multi_relay();
  void set_has_seq();
  void clear_has_seq();
  void set_has_xrequest_id();
  void clear_has_xrequest_id();
  void set_has_xid();
  void clear_has_xid();
  void set_has_broadcast();
  void clear_has_broadcast();
  void set_has_priority();
  void clear_has_priority();
  void set_has_gossip();
  void clear_has_gossip();
  void set_has_enable_ack();
  void clear_has_enable_ack();
  void set_has_debug();
  void clear_has_debug();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::top::transport::protobuf::HopInfo > hop_nodes_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > bloomfilter_;
  ::google::protobuf::RepeatedPtrField< ::top::transport::protobuf::RelayHopInfo > relay_hop_info_;
  ::google::protobuf::RepeatedPtrField< ::std::string> trace_route_;
  ::google::protobuf::internal::ArenaStringPtr src_node_id_;
  ::google::protobuf::internal::ArenaStringPtr des_node_id_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::internal::ArenaStringPtr client_id_;
  ::google::protobuf::internal::ArenaStringPtr xrequest_id_;
  ::google::protobuf::internal::ArenaStringPtr xid_;
  ::google::protobuf::internal::ArenaStringPtr debug_;
  ::top::transport::protobuf::VersionTag* version_tag_;
  ::top::transport::protobuf::GossipParams* gossip_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 ack_id_;
  ::google::protobuf::uint32 hop_num_;
  ::google::protobuf::int32 retry_;
  bool client_msg_;
  bool relay_flag_;
  bool request_type_;
  bool direct_mode_;
  ::google::protobuf::uint64 src_service_type_;
  ::google::protobuf::uint64 des_service_type_;
  ::google::protobuf::uint32 status_;
  ::google::protobuf::uint32 seq_;
  bool is_root_;
  bool multi_relay_;
  bool broadcast_;
  bool enable_ack_;
  ::google::protobuf::uint32 priority_;
  friend struct ::protobuf_transport_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HopInfo

// optional bytes node_id = 1;
inline bool HopInfo::has_node_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HopInfo::set_has_node_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HopInfo::clear_has_node_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HopInfo::clear_node_id() {
  node_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_node_id();
}
inline const ::std::string& HopInfo::node_id() const {
  // @@protoc_insertion_point(field_get:top.transport.protobuf.HopInfo.node_id)
  return node_id_.GetNoArena();
}
inline void HopInfo::set_node_id(const ::std::string& value) {
  set_has_node_id();
  node_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:top.transport.protobuf.HopInfo.node_id)
}
#if LANG_CXX11
inline void HopInfo::set_node_id(::std::string&& value) {
  set_has_node_id();
  node_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:top.transport.protobuf.HopInfo.node_id)
}
#endif
inline void HopInfo::set_node_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_node_id();
  node_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:top.transport.protobuf.HopInfo.node_id)
}
inline void HopInfo::set_node_id(const void* value, size_t size) {
  set_has_node_id();
  node_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:top.transport.protobuf.HopInfo.node_id)
}
inline ::std::string* HopInfo::mutable_node_id() {
  set_has_node_id();
  // @@protoc_insertion_point(field_mutable:top.transport.protobuf.HopInfo.node_id)
  return node_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HopInfo::release_node_id() {
  // @@protoc_insertion_point(field_release:top.transport.protobuf.HopInfo.node_id)
  if (!has_node_id()) {
    return NULL;
  }
  clear_has_node_id();
  return node_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HopInfo::set_allocated_node_id(::std::string* node_id) {
  if (node_id != NULL) {
    set_has_node_id();
  } else {
    clear_has_node_id();
  }
  node_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node_id);
  // @@protoc_insertion_point(field_set_allocated:top.transport.protobuf.HopInfo.node_id)
}

// optional bytes ip = 2;
inline bool HopInfo::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HopInfo::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HopInfo::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HopInfo::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip();
}
inline const ::std::string& HopInfo::ip() const {
  // @@protoc_insertion_point(field_get:top.transport.protobuf.HopInfo.ip)
  return ip_.GetNoArena();
}
inline void HopInfo::set_ip(const ::std::string& value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:top.transport.protobuf.HopInfo.ip)
}
#if LANG_CXX11
inline void HopInfo::set_ip(::std::string&& value) {
  set_has_ip();
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:top.transport.protobuf.HopInfo.ip)
}
#endif
inline void HopInfo::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:top.transport.protobuf.HopInfo.ip)
}
inline void HopInfo::set_ip(const void* value, size_t size) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:top.transport.protobuf.HopInfo.ip)
}
inline ::std::string* HopInfo::mutable_ip() {
  set_has_ip();
  // @@protoc_insertion_point(field_mutable:top.transport.protobuf.HopInfo.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HopInfo::release_ip() {
  // @@protoc_insertion_point(field_release:top.transport.protobuf.HopInfo.ip)
  if (!has_ip()) {
    return NULL;
  }
  clear_has_ip();
  return ip_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HopInfo::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    set_has_ip();
  } else {
    clear_has_ip();
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:top.transport.protobuf.HopInfo.ip)
}

// optional int32 port = 3;
inline bool HopInfo::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HopInfo::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HopInfo::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HopInfo::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 HopInfo::port() const {
  // @@protoc_insertion_point(field_get:top.transport.protobuf.HopInfo.port)
  return port_;
}
inline void HopInfo::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:top.transport.protobuf.HopInfo.port)
}

// -------------------------------------------------------------------

// VersionTag

// optional bytes version = 1;
inline bool VersionTag::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VersionTag::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VersionTag::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VersionTag::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_version();
}
inline const ::std::string& VersionTag::version() const {
  // @@protoc_insertion_point(field_get:top.transport.protobuf.VersionTag.version)
  return version_.GetNoArena();
}
inline void VersionTag::set_version(const ::std::string& value) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:top.transport.protobuf.VersionTag.version)
}
#if LANG_CXX11
inline void VersionTag::set_version(::std::string&& value) {
  set_has_version();
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:top.transport.protobuf.VersionTag.version)
}
#endif
inline void VersionTag::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:top.transport.protobuf.VersionTag.version)
}
inline void VersionTag::set_version(const void* value, size_t size) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:top.transport.protobuf.VersionTag.version)
}
inline ::std::string* VersionTag::mutable_version() {
  set_has_version();
  // @@protoc_insertion_point(field_mutable:top.transport.protobuf.VersionTag.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VersionTag::release_version() {
  // @@protoc_insertion_point(field_release:top.transport.protobuf.VersionTag.version)
  if (!has_version()) {
    return NULL;
  }
  clear_has_version();
  return version_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VersionTag::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    set_has_version();
  } else {
    clear_has_version();
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:top.transport.protobuf.VersionTag.version)
}

// optional bytes copyright = 2;
inline bool VersionTag::has_copyright() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VersionTag::set_has_copyright() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VersionTag::clear_has_copyright() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VersionTag::clear_copyright() {
  copyright_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_copyright();
}
inline const ::std::string& VersionTag::copyright() const {
  // @@protoc_insertion_point(field_get:top.transport.protobuf.VersionTag.copyright)
  return copyright_.GetNoArena();
}
inline void VersionTag::set_copyright(const ::std::string& value) {
  set_has_copyright();
  copyright_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:top.transport.protobuf.VersionTag.copyright)
}
#if LANG_CXX11
inline void VersionTag::set_copyright(::std::string&& value) {
  set_has_copyright();
  copyright_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:top.transport.protobuf.VersionTag.copyright)
}
#endif
inline void VersionTag::set_copyright(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_copyright();
  copyright_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:top.transport.protobuf.VersionTag.copyright)
}
inline void VersionTag::set_copyright(const void* value, size_t size) {
  set_has_copyright();
  copyright_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:top.transport.protobuf.VersionTag.copyright)
}
inline ::std::string* VersionTag::mutable_copyright() {
  set_has_copyright();
  // @@protoc_insertion_point(field_mutable:top.transport.protobuf.VersionTag.copyright)
  return copyright_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VersionTag::release_copyright() {
  // @@protoc_insertion_point(field_release:top.transport.protobuf.VersionTag.copyright)
  if (!has_copyright()) {
    return NULL;
  }
  clear_has_copyright();
  return copyright_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VersionTag::set_allocated_copyright(::std::string* copyright) {
  if (copyright != NULL) {
    set_has_copyright();
  } else {
    clear_has_copyright();
  }
  copyright_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), copyright);
  // @@protoc_insertion_point(field_set_allocated:top.transport.protobuf.VersionTag.copyright)
}

// -------------------------------------------------------------------

// RelayHopInfo

// optional bytes relay_entry_id = 1;
inline bool RelayHopInfo::has_relay_entry_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RelayHopInfo::set_has_relay_entry_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RelayHopInfo::clear_has_relay_entry_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RelayHopInfo::clear_relay_entry_id() {
  relay_entry_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_relay_entry_id();
}
inline const ::std::string& RelayHopInfo::relay_entry_id() const {
  // @@protoc_insertion_point(field_get:top.transport.protobuf.RelayHopInfo.relay_entry_id)
  return relay_entry_id_.GetNoArena();
}
inline void RelayHopInfo::set_relay_entry_id(const ::std::string& value) {
  set_has_relay_entry_id();
  relay_entry_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:top.transport.protobuf.RelayHopInfo.relay_entry_id)
}
#if LANG_CXX11
inline void RelayHopInfo::set_relay_entry_id(::std::string&& value) {
  set_has_relay_entry_id();
  relay_entry_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:top.transport.protobuf.RelayHopInfo.relay_entry_id)
}
#endif
inline void RelayHopInfo::set_relay_entry_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_relay_entry_id();
  relay_entry_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:top.transport.protobuf.RelayHopInfo.relay_entry_id)
}
inline void RelayHopInfo::set_relay_entry_id(const void* value, size_t size) {
  set_has_relay_entry_id();
  relay_entry_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:top.transport.protobuf.RelayHopInfo.relay_entry_id)
}
inline ::std::string* RelayHopInfo::mutable_relay_entry_id() {
  set_has_relay_entry_id();
  // @@protoc_insertion_point(field_mutable:top.transport.protobuf.RelayHopInfo.relay_entry_id)
  return relay_entry_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RelayHopInfo::release_relay_entry_id() {
  // @@protoc_insertion_point(field_release:top.transport.protobuf.RelayHopInfo.relay_entry_id)
  if (!has_relay_entry_id()) {
    return NULL;
  }
  clear_has_relay_entry_id();
  return relay_entry_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RelayHopInfo::set_allocated_relay_entry_id(::std::string* relay_entry_id) {
  if (relay_entry_id != NULL) {
    set_has_relay_entry_id();
  } else {
    clear_has_relay_entry_id();
  }
  relay_entry_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), relay_entry_id);
  // @@protoc_insertion_point(field_set_allocated:top.transport.protobuf.RelayHopInfo.relay_entry_id)
}

// optional uint64 service_type = 2;
inline bool RelayHopInfo::has_service_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RelayHopInfo::set_has_service_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RelayHopInfo::clear_has_service_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RelayHopInfo::clear_service_type() {
  service_type_ = GOOGLE_ULONGLONG(0);
  clear_has_service_type();
}
inline ::google::protobuf::uint64 RelayHopInfo::service_type() const {
  // @@protoc_insertion_point(field_get:top.transport.protobuf.RelayHopInfo.service_type)
  return service_type_;
}
inline void RelayHopInfo::set_service_type(::google::protobuf::uint64 value) {
  set_has_service_type();
  service_type_ = value;
  // @@protoc_insertion_point(field_set:top.transport.protobuf.RelayHopInfo.service_type)
}

// optional bool relay_flag = 3;
inline bool RelayHopInfo::has_relay_flag() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RelayHopInfo::set_has_relay_flag() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RelayHopInfo::clear_has_relay_flag() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RelayHopInfo::clear_relay_flag() {
  relay_flag_ = false;
  clear_has_relay_flag();
}
inline bool RelayHopInfo::relay_flag() const {
  // @@protoc_insertion_point(field_get:top.transport.protobuf.RelayHopInfo.relay_flag)
  return relay_flag_;
}
inline void RelayHopInfo::set_relay_flag(bool value) {
  set_has_relay_flag();
  relay_flag_ = value;
  // @@protoc_insertion_point(field_set:top.transport.protobuf.RelayHopInfo.relay_flag)
}

// optional bytes relay_exit_id = 4;
inline bool RelayHopInfo::has_relay_exit_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RelayHopInfo::set_has_relay_exit_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RelayHopInfo::clear_has_relay_exit_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RelayHopInfo::clear_relay_exit_id() {
  relay_exit_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_relay_exit_id();
}
inline const ::std::string& RelayHopInfo::relay_exit_id() const {
  // @@protoc_insertion_point(field_get:top.transport.protobuf.RelayHopInfo.relay_exit_id)
  return relay_exit_id_.GetNoArena();
}
inline void RelayHopInfo::set_relay_exit_id(const ::std::string& value) {
  set_has_relay_exit_id();
  relay_exit_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:top.transport.protobuf.RelayHopInfo.relay_exit_id)
}
#if LANG_CXX11
inline void RelayHopInfo::set_relay_exit_id(::std::string&& value) {
  set_has_relay_exit_id();
  relay_exit_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:top.transport.protobuf.RelayHopInfo.relay_exit_id)
}
#endif
inline void RelayHopInfo::set_relay_exit_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_relay_exit_id();
  relay_exit_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:top.transport.protobuf.RelayHopInfo.relay_exit_id)
}
inline void RelayHopInfo::set_relay_exit_id(const void* value, size_t size) {
  set_has_relay_exit_id();
  relay_exit_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:top.transport.protobuf.RelayHopInfo.relay_exit_id)
}
inline ::std::string* RelayHopInfo::mutable_relay_exit_id() {
  set_has_relay_exit_id();
  // @@protoc_insertion_point(field_mutable:top.transport.protobuf.RelayHopInfo.relay_exit_id)
  return relay_exit_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RelayHopInfo::release_relay_exit_id() {
  // @@protoc_insertion_point(field_release:top.transport.protobuf.RelayHopInfo.relay_exit_id)
  if (!has_relay_exit_id()) {
    return NULL;
  }
  clear_has_relay_exit_id();
  return relay_exit_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RelayHopInfo::set_allocated_relay_exit_id(::std::string* relay_exit_id) {
  if (relay_exit_id != NULL) {
    set_has_relay_exit_id();
  } else {
    clear_has_relay_exit_id();
  }
  relay_exit_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), relay_exit_id);
  // @@protoc_insertion_point(field_set_allocated:top.transport.protobuf.RelayHopInfo.relay_exit_id)
}

// -------------------------------------------------------------------

// GossipParams

// optional int32 reliable_level = 1;
inline bool GossipParams::has_reliable_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GossipParams::set_has_reliable_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GossipParams::clear_has_reliable_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GossipParams::clear_reliable_level() {
  reliable_level_ = 0;
  clear_has_reliable_level();
}
inline ::google::protobuf::int32 GossipParams::reliable_level() const {
  // @@protoc_insertion_point(field_get:top.transport.protobuf.GossipParams.reliable_level)
  return reliable_level_;
}
inline void GossipParams::set_reliable_level(::google::protobuf::int32 value) {
  set_has_reliable_level();
  reliable_level_ = value;
  // @@protoc_insertion_point(field_set:top.transport.protobuf.GossipParams.reliable_level)
}

// optional uint32 neighber_count = 2;
inline bool GossipParams::has_neighber_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GossipParams::set_has_neighber_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GossipParams::clear_has_neighber_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GossipParams::clear_neighber_count() {
  neighber_count_ = 0u;
  clear_has_neighber_count();
}
inline ::google::protobuf::uint32 GossipParams::neighber_count() const {
  // @@protoc_insertion_point(field_get:top.transport.protobuf.GossipParams.neighber_count)
  return neighber_count_;
}
inline void GossipParams::set_neighber_count(::google::protobuf::uint32 value) {
  set_has_neighber_count();
  neighber_count_ = value;
  // @@protoc_insertion_point(field_set:top.transport.protobuf.GossipParams.neighber_count)
}

// optional uint32 stop_times = 3;
inline bool GossipParams::has_stop_times() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GossipParams::set_has_stop_times() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GossipParams::clear_has_stop_times() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GossipParams::clear_stop_times() {
  stop_times_ = 0u;
  clear_has_stop_times();
}
inline ::google::protobuf::uint32 GossipParams::stop_times() const {
  // @@protoc_insertion_point(field_get:top.transport.protobuf.GossipParams.stop_times)
  return stop_times_;
}
inline void GossipParams::set_stop_times(::google::protobuf::uint32 value) {
  set_has_stop_times();
  stop_times_ = value;
  // @@protoc_insertion_point(field_set:top.transport.protobuf.GossipParams.stop_times)
}

// optional int32 gossip_type = 4;
inline bool GossipParams::has_gossip_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GossipParams::set_has_gossip_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GossipParams::clear_has_gossip_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GossipParams::clear_gossip_type() {
  gossip_type_ = 0;
  clear_has_gossip_type();
}
inline ::google::protobuf::int32 GossipParams::gossip_type() const {
  // @@protoc_insertion_point(field_get:top.transport.protobuf.GossipParams.gossip_type)
  return gossip_type_;
}
inline void GossipParams::set_gossip_type(::google::protobuf::int32 value) {
  set_has_gossip_type();
  gossip_type_ = value;
  // @@protoc_insertion_point(field_set:top.transport.protobuf.GossipParams.gossip_type)
}

// optional int32 evil_rate = 5;
inline bool GossipParams::has_evil_rate() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GossipParams::set_has_evil_rate() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GossipParams::clear_has_evil_rate() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GossipParams::clear_evil_rate() {
  evil_rate_ = 0;
  clear_has_evil_rate();
}
inline ::google::protobuf::int32 GossipParams::evil_rate() const {
  // @@protoc_insertion_point(field_get:top.transport.protobuf.GossipParams.evil_rate)
  return evil_rate_;
}
inline void GossipParams::set_evil_rate(::google::protobuf::int32 value) {
  set_has_evil_rate();
  evil_rate_ = value;
  // @@protoc_insertion_point(field_set:top.transport.protobuf.GossipParams.evil_rate)
}

// optional uint32 max_hop_num = 6;
inline bool GossipParams::has_max_hop_num() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GossipParams::set_has_max_hop_num() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GossipParams::clear_has_max_hop_num() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GossipParams::clear_max_hop_num() {
  max_hop_num_ = 0u;
  clear_has_max_hop_num();
}
inline ::google::protobuf::uint32 GossipParams::max_hop_num() const {
  // @@protoc_insertion_point(field_get:top.transport.protobuf.GossipParams.max_hop_num)
  return max_hop_num_;
}
inline void GossipParams::set_max_hop_num(::google::protobuf::uint32 value) {
  set_has_max_hop_num();
  max_hop_num_ = value;
  // @@protoc_insertion_point(field_set:top.transport.protobuf.GossipParams.max_hop_num)
}

// optional uint64 min_dis = 7;
inline bool GossipParams::has_min_dis() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GossipParams::set_has_min_dis() {
  _has_bits_[0] |= 0x00000200u;
}
inline void GossipParams::clear_has_min_dis() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void GossipParams::clear_min_dis() {
  min_dis_ = GOOGLE_ULONGLONG(0);
  clear_has_min_dis();
}
inline ::google::protobuf::uint64 GossipParams::min_dis() const {
  // @@protoc_insertion_point(field_get:top.transport.protobuf.GossipParams.min_dis)
  return min_dis_;
}
inline void GossipParams::set_min_dis(::google::protobuf::uint64 value) {
  set_has_min_dis();
  min_dis_ = value;
  // @@protoc_insertion_point(field_set:top.transport.protobuf.GossipParams.min_dis)
}

// optional uint64 max_dis = 8;
inline bool GossipParams::has_max_dis() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void GossipParams::set_has_max_dis() {
  _has_bits_[0] |= 0x00000400u;
}
inline void GossipParams::clear_has_max_dis() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void GossipParams::clear_max_dis() {
  max_dis_ = GOOGLE_ULONGLONG(0);
  clear_has_max_dis();
}
inline ::google::protobuf::uint64 GossipParams::max_dis() const {
  // @@protoc_insertion_point(field_get:top.transport.protobuf.GossipParams.max_dis)
  return max_dis_;
}
inline void GossipParams::set_max_dis(::google::protobuf::uint64 value) {
  set_has_max_dis();
  max_dis_ = value;
  // @@protoc_insertion_point(field_set:top.transport.protobuf.GossipParams.max_dis)
}

// optional uint64 left_min = 9;
inline bool GossipParams::has_left_min() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void GossipParams::set_has_left_min() {
  _has_bits_[0] |= 0x00000800u;
}
inline void GossipParams::clear_has_left_min() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void GossipParams::clear_left_min() {
  left_min_ = GOOGLE_ULONGLONG(0);
  clear_has_left_min();
}
inline ::google::protobuf::uint64 GossipParams::left_min() const {
  // @@protoc_insertion_point(field_get:top.transport.protobuf.GossipParams.left_min)
  return left_min_;
}
inline void GossipParams::set_left_min(::google::protobuf::uint64 value) {
  set_has_left_min();
  left_min_ = value;
  // @@protoc_insertion_point(field_set:top.transport.protobuf.GossipParams.left_min)
}

// optional uint64 right_max = 10;
inline bool GossipParams::has_right_max() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void GossipParams::set_has_right_max() {
  _has_bits_[0] |= 0x00001000u;
}
inline void GossipParams::clear_has_right_max() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void GossipParams::clear_right_max() {
  right_max_ = GOOGLE_ULONGLONG(0);
  clear_has_right_max();
}
inline ::google::protobuf::uint64 GossipParams::right_max() const {
  // @@protoc_insertion_point(field_get:top.transport.protobuf.GossipParams.right_max)
  return right_max_;
}
inline void GossipParams::set_right_max(::google::protobuf::uint64 value) {
  set_has_right_max();
  right_max_ = value;
  // @@protoc_insertion_point(field_set:top.transport.protobuf.GossipParams.right_max)
}

// optional uint32 left_overlap = 11;
inline bool GossipParams::has_left_overlap() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void GossipParams::set_has_left_overlap() {
  _has_bits_[0] |= 0x00002000u;
}
inline void GossipParams::clear_has_left_overlap() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void GossipParams::clear_left_overlap() {
  left_overlap_ = 0u;
  clear_has_left_overlap();
}
inline ::google::protobuf::uint32 GossipParams::left_overlap() const {
  // @@protoc_insertion_point(field_get:top.transport.protobuf.GossipParams.left_overlap)
  return left_overlap_;
}
inline void GossipParams::set_left_overlap(::google::protobuf::uint32 value) {
  set_has_left_overlap();
  left_overlap_ = value;
  // @@protoc_insertion_point(field_set:top.transport.protobuf.GossipParams.left_overlap)
}

// optional uint32 right_overlap = 12;
inline bool GossipParams::has_right_overlap() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void GossipParams::set_has_right_overlap() {
  _has_bits_[0] |= 0x00004000u;
}
inline void GossipParams::clear_has_right_overlap() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void GossipParams::clear_right_overlap() {
  right_overlap_ = 0u;
  clear_has_right_overlap();
}
inline ::google::protobuf::uint32 GossipParams::right_overlap() const {
  // @@protoc_insertion_point(field_get:top.transport.protobuf.GossipParams.right_overlap)
  return right_overlap_;
}
inline void GossipParams::set_right_overlap(::google::protobuf::uint32 value) {
  set_has_right_overlap();
  right_overlap_ = value;
  // @@protoc_insertion_point(field_set:top.transport.protobuf.GossipParams.right_overlap)
}

// optional uint32 switch_layer_hop_num = 13;
inline bool GossipParams::has_switch_layer_hop_num() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void GossipParams::set_has_switch_layer_hop_num() {
  _has_bits_[0] |= 0x00008000u;
}
inline void GossipParams::clear_has_switch_layer_hop_num() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void GossipParams::clear_switch_layer_hop_num() {
  switch_layer_hop_num_ = 0u;
  clear_has_switch_layer_hop_num();
}
inline ::google::protobuf::uint32 GossipParams::switch_layer_hop_num() const {
  // @@protoc_insertion_point(field_get:top.transport.protobuf.GossipParams.switch_layer_hop_num)
  return switch_layer_hop_num_;
}
inline void GossipParams::set_switch_layer_hop_num(::google::protobuf::uint32 value) {
  set_has_switch_layer_hop_num();
  switch_layer_hop_num_ = value;
  // @@protoc_insertion_point(field_set:top.transport.protobuf.GossipParams.switch_layer_hop_num)
}

// optional bytes header_hash = 14;
inline bool GossipParams::has_header_hash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GossipParams::set_has_header_hash() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GossipParams::clear_has_header_hash() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GossipParams::clear_header_hash() {
  header_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_header_hash();
}
inline const ::std::string& GossipParams::header_hash() const {
  // @@protoc_insertion_point(field_get:top.transport.protobuf.GossipParams.header_hash)
  return header_hash_.GetNoArena();
}
inline void GossipParams::set_header_hash(const ::std::string& value) {
  set_has_header_hash();
  header_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:top.transport.protobuf.GossipParams.header_hash)
}
#if LANG_CXX11
inline void GossipParams::set_header_hash(::std::string&& value) {
  set_has_header_hash();
  header_hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:top.transport.protobuf.GossipParams.header_hash)
}
#endif
inline void GossipParams::set_header_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_header_hash();
  header_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:top.transport.protobuf.GossipParams.header_hash)
}
inline void GossipParams::set_header_hash(const void* value, size_t size) {
  set_has_header_hash();
  header_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:top.transport.protobuf.GossipParams.header_hash)
}
inline ::std::string* GossipParams::mutable_header_hash() {
  set_has_header_hash();
  // @@protoc_insertion_point(field_mutable:top.transport.protobuf.GossipParams.header_hash)
  return header_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GossipParams::release_header_hash() {
  // @@protoc_insertion_point(field_release:top.transport.protobuf.GossipParams.header_hash)
  if (!has_header_hash()) {
    return NULL;
  }
  clear_has_header_hash();
  return header_hash_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GossipParams::set_allocated_header_hash(::std::string* header_hash) {
  if (header_hash != NULL) {
    set_has_header_hash();
  } else {
    clear_has_header_hash();
  }
  header_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), header_hash);
  // @@protoc_insertion_point(field_set_allocated:top.transport.protobuf.GossipParams.header_hash)
}

// optional bytes block = 15;
inline bool GossipParams::has_block() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GossipParams::set_has_block() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GossipParams::clear_has_block() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GossipParams::clear_block() {
  block_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_block();
}
inline const ::std::string& GossipParams::block() const {
  // @@protoc_insertion_point(field_get:top.transport.protobuf.GossipParams.block)
  return block_.GetNoArena();
}
inline void GossipParams::set_block(const ::std::string& value) {
  set_has_block();
  block_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:top.transport.protobuf.GossipParams.block)
}
#if LANG_CXX11
inline void GossipParams::set_block(::std::string&& value) {
  set_has_block();
  block_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:top.transport.protobuf.GossipParams.block)
}
#endif
inline void GossipParams::set_block(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_block();
  block_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:top.transport.protobuf.GossipParams.block)
}
inline void GossipParams::set_block(const void* value, size_t size) {
  set_has_block();
  block_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:top.transport.protobuf.GossipParams.block)
}
inline ::std::string* GossipParams::mutable_block() {
  set_has_block();
  // @@protoc_insertion_point(field_mutable:top.transport.protobuf.GossipParams.block)
  return block_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GossipParams::release_block() {
  // @@protoc_insertion_point(field_release:top.transport.protobuf.GossipParams.block)
  if (!has_block()) {
    return NULL;
  }
  clear_has_block();
  return block_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GossipParams::set_allocated_block(::std::string* block) {
  if (block != NULL) {
    set_has_block();
  } else {
    clear_has_block();
  }
  block_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), block);
  // @@protoc_insertion_point(field_set_allocated:top.transport.protobuf.GossipParams.block)
}

// optional uint32 ign_bloomfilter_level = 16;
inline bool GossipParams::has_ign_bloomfilter_level() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void GossipParams::set_has_ign_bloomfilter_level() {
  _has_bits_[0] |= 0x00010000u;
}
inline void GossipParams::clear_has_ign_bloomfilter_level() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void GossipParams::clear_ign_bloomfilter_level() {
  ign_bloomfilter_level_ = 0u;
  clear_has_ign_bloomfilter_level();
}
inline ::google::protobuf::uint32 GossipParams::ign_bloomfilter_level() const {
  // @@protoc_insertion_point(field_get:top.transport.protobuf.GossipParams.ign_bloomfilter_level)
  return ign_bloomfilter_level_;
}
inline void GossipParams::set_ign_bloomfilter_level(::google::protobuf::uint32 value) {
  set_has_ign_bloomfilter_level();
  ign_bloomfilter_level_ = value;
  // @@protoc_insertion_point(field_set:top.transport.protobuf.GossipParams.ign_bloomfilter_level)
}

// optional bool diff_net = 17;
inline bool GossipParams::has_diff_net() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void GossipParams::set_has_diff_net() {
  _has_bits_[0] |= 0x00020000u;
}
inline void GossipParams::clear_has_diff_net() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void GossipParams::clear_diff_net() {
  diff_net_ = false;
  clear_has_diff_net();
}
inline bool GossipParams::diff_net() const {
  // @@protoc_insertion_point(field_get:top.transport.protobuf.GossipParams.diff_net)
  return diff_net_;
}
inline void GossipParams::set_diff_net(bool value) {
  set_has_diff_net();
  diff_net_ = value;
  // @@protoc_insertion_point(field_set:top.transport.protobuf.GossipParams.diff_net)
}

// repeated uint32 pass_node = 18;
inline int GossipParams::pass_node_size() const {
  return pass_node_.size();
}
inline void GossipParams::clear_pass_node() {
  pass_node_.Clear();
}
inline ::google::protobuf::uint32 GossipParams::pass_node(int index) const {
  // @@protoc_insertion_point(field_get:top.transport.protobuf.GossipParams.pass_node)
  return pass_node_.Get(index);
}
inline void GossipParams::set_pass_node(int index, ::google::protobuf::uint32 value) {
  pass_node_.Set(index, value);
  // @@protoc_insertion_point(field_set:top.transport.protobuf.GossipParams.pass_node)
}
inline void GossipParams::add_pass_node(::google::protobuf::uint32 value) {
  pass_node_.Add(value);
  // @@protoc_insertion_point(field_add:top.transport.protobuf.GossipParams.pass_node)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GossipParams::pass_node() const {
  // @@protoc_insertion_point(field_list:top.transport.protobuf.GossipParams.pass_node)
  return pass_node_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GossipParams::mutable_pass_node() {
  // @@protoc_insertion_point(field_mutable_list:top.transport.protobuf.GossipParams.pass_node)
  return &pass_node_;
}

// optional uint32 msg_hash = 19;
inline bool GossipParams::has_msg_hash() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void GossipParams::set_has_msg_hash() {
  _has_bits_[0] |= 0x00040000u;
}
inline void GossipParams::clear_has_msg_hash() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void GossipParams::clear_msg_hash() {
  msg_hash_ = 0u;
  clear_has_msg_hash();
}
inline ::google::protobuf::uint32 GossipParams::msg_hash() const {
  // @@protoc_insertion_point(field_get:top.transport.protobuf.GossipParams.msg_hash)
  return msg_hash_;
}
inline void GossipParams::set_msg_hash(::google::protobuf::uint32 value) {
  set_has_msg_hash();
  msg_hash_ = value;
  // @@protoc_insertion_point(field_set:top.transport.protobuf.GossipParams.msg_hash)
}

// optional bytes pre_ip = 20;
inline bool GossipParams::has_pre_ip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GossipParams::set_has_pre_ip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GossipParams::clear_has_pre_ip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GossipParams::clear_pre_ip() {
  pre_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pre_ip();
}
inline const ::std::string& GossipParams::pre_ip() const {
  // @@protoc_insertion_point(field_get:top.transport.protobuf.GossipParams.pre_ip)
  return pre_ip_.GetNoArena();
}
inline void GossipParams::set_pre_ip(const ::std::string& value) {
  set_has_pre_ip();
  pre_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:top.transport.protobuf.GossipParams.pre_ip)
}
#if LANG_CXX11
inline void GossipParams::set_pre_ip(::std::string&& value) {
  set_has_pre_ip();
  pre_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:top.transport.protobuf.GossipParams.pre_ip)
}
#endif
inline void GossipParams::set_pre_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pre_ip();
  pre_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:top.transport.protobuf.GossipParams.pre_ip)
}
inline void GossipParams::set_pre_ip(const void* value, size_t size) {
  set_has_pre_ip();
  pre_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:top.transport.protobuf.GossipParams.pre_ip)
}
inline ::std::string* GossipParams::mutable_pre_ip() {
  set_has_pre_ip();
  // @@protoc_insertion_point(field_mutable:top.transport.protobuf.GossipParams.pre_ip)
  return pre_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GossipParams::release_pre_ip() {
  // @@protoc_insertion_point(field_release:top.transport.protobuf.GossipParams.pre_ip)
  if (!has_pre_ip()) {
    return NULL;
  }
  clear_has_pre_ip();
  return pre_ip_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GossipParams::set_allocated_pre_ip(::std::string* pre_ip) {
  if (pre_ip != NULL) {
    set_has_pre_ip();
  } else {
    clear_has_pre_ip();
  }
  pre_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pre_ip);
  // @@protoc_insertion_point(field_set_allocated:top.transport.protobuf.GossipParams.pre_ip)
}

// optional int32 pre_port = 21;
inline bool GossipParams::has_pre_port() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void GossipParams::set_has_pre_port() {
  _has_bits_[0] |= 0x00080000u;
}
inline void GossipParams::clear_has_pre_port() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void GossipParams::clear_pre_port() {
  pre_port_ = 0;
  clear_has_pre_port();
}
inline ::google::protobuf::int32 GossipParams::pre_port() const {
  // @@protoc_insertion_point(field_get:top.transport.protobuf.GossipParams.pre_port)
  return pre_port_;
}
inline void GossipParams::set_pre_port(::google::protobuf::int32 value) {
  set_has_pre_port();
  pre_port_ = value;
  // @@protoc_insertion_point(field_set:top.transport.protobuf.GossipParams.pre_port)
}

// -------------------------------------------------------------------

// GossipSyncBlockData

// optional bytes header_hash = 1;
inline bool GossipSyncBlockData::has_header_hash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GossipSyncBlockData::set_has_header_hash() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GossipSyncBlockData::clear_has_header_hash() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GossipSyncBlockData::clear_header_hash() {
  header_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_header_hash();
}
inline const ::std::string& GossipSyncBlockData::header_hash() const {
  // @@protoc_insertion_point(field_get:top.transport.protobuf.GossipSyncBlockData.header_hash)
  return header_hash_.GetNoArena();
}
inline void GossipSyncBlockData::set_header_hash(const ::std::string& value) {
  set_has_header_hash();
  header_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:top.transport.protobuf.GossipSyncBlockData.header_hash)
}
#if LANG_CXX11
inline void GossipSyncBlockData::set_header_hash(::std::string&& value) {
  set_has_header_hash();
  header_hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:top.transport.protobuf.GossipSyncBlockData.header_hash)
}
#endif
inline void GossipSyncBlockData::set_header_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_header_hash();
  header_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:top.transport.protobuf.GossipSyncBlockData.header_hash)
}
inline void GossipSyncBlockData::set_header_hash(const void* value, size_t size) {
  set_has_header_hash();
  header_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:top.transport.protobuf.GossipSyncBlockData.header_hash)
}
inline ::std::string* GossipSyncBlockData::mutable_header_hash() {
  set_has_header_hash();
  // @@protoc_insertion_point(field_mutable:top.transport.protobuf.GossipSyncBlockData.header_hash)
  return header_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GossipSyncBlockData::release_header_hash() {
  // @@protoc_insertion_point(field_release:top.transport.protobuf.GossipSyncBlockData.header_hash)
  if (!has_header_hash()) {
    return NULL;
  }
  clear_has_header_hash();
  return header_hash_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GossipSyncBlockData::set_allocated_header_hash(::std::string* header_hash) {
  if (header_hash != NULL) {
    set_has_header_hash();
  } else {
    clear_has_header_hash();
  }
  header_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), header_hash);
  // @@protoc_insertion_point(field_set_allocated:top.transport.protobuf.GossipSyncBlockData.header_hash)
}

// optional bytes block = 2;
inline bool GossipSyncBlockData::has_block() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GossipSyncBlockData::set_has_block() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GossipSyncBlockData::clear_has_block() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GossipSyncBlockData::clear_block() {
  block_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_block();
}
inline const ::std::string& GossipSyncBlockData::block() const {
  // @@protoc_insertion_point(field_get:top.transport.protobuf.GossipSyncBlockData.block)
  return block_.GetNoArena();
}
inline void GossipSyncBlockData::set_block(const ::std::string& value) {
  set_has_block();
  block_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:top.transport.protobuf.GossipSyncBlockData.block)
}
#if LANG_CXX11
inline void GossipSyncBlockData::set_block(::std::string&& value) {
  set_has_block();
  block_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:top.transport.protobuf.GossipSyncBlockData.block)
}
#endif
inline void GossipSyncBlockData::set_block(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_block();
  block_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:top.transport.protobuf.GossipSyncBlockData.block)
}
inline void GossipSyncBlockData::set_block(const void* value, size_t size) {
  set_has_block();
  block_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:top.transport.protobuf.GossipSyncBlockData.block)
}
inline ::std::string* GossipSyncBlockData::mutable_block() {
  set_has_block();
  // @@protoc_insertion_point(field_mutable:top.transport.protobuf.GossipSyncBlockData.block)
  return block_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GossipSyncBlockData::release_block() {
  // @@protoc_insertion_point(field_release:top.transport.protobuf.GossipSyncBlockData.block)
  if (!has_block()) {
    return NULL;
  }
  clear_has_block();
  return block_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GossipSyncBlockData::set_allocated_block(::std::string* block) {
  if (block != NULL) {
    set_has_block();
  } else {
    clear_has_block();
  }
  block_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), block);
  // @@protoc_insertion_point(field_set_allocated:top.transport.protobuf.GossipSyncBlockData.block)
}

// -------------------------------------------------------------------

// RoutingMessage

// optional bytes src_node_id = 1;
inline bool RoutingMessage::has_src_node_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoutingMessage::set_has_src_node_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoutingMessage::clear_has_src_node_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoutingMessage::clear_src_node_id() {
  src_node_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_src_node_id();
}
inline const ::std::string& RoutingMessage::src_node_id() const {
  // @@protoc_insertion_point(field_get:top.transport.protobuf.RoutingMessage.src_node_id)
  return src_node_id_.GetNoArena();
}
inline void RoutingMessage::set_src_node_id(const ::std::string& value) {
  set_has_src_node_id();
  src_node_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:top.transport.protobuf.RoutingMessage.src_node_id)
}
#if LANG_CXX11
inline void RoutingMessage::set_src_node_id(::std::string&& value) {
  set_has_src_node_id();
  src_node_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:top.transport.protobuf.RoutingMessage.src_node_id)
}
#endif
inline void RoutingMessage::set_src_node_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_src_node_id();
  src_node_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:top.transport.protobuf.RoutingMessage.src_node_id)
}
inline void RoutingMessage::set_src_node_id(const void* value, size_t size) {
  set_has_src_node_id();
  src_node_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:top.transport.protobuf.RoutingMessage.src_node_id)
}
inline ::std::string* RoutingMessage::mutable_src_node_id() {
  set_has_src_node_id();
  // @@protoc_insertion_point(field_mutable:top.transport.protobuf.RoutingMessage.src_node_id)
  return src_node_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RoutingMessage::release_src_node_id() {
  // @@protoc_insertion_point(field_release:top.transport.protobuf.RoutingMessage.src_node_id)
  if (!has_src_node_id()) {
    return NULL;
  }
  clear_has_src_node_id();
  return src_node_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RoutingMessage::set_allocated_src_node_id(::std::string* src_node_id) {
  if (src_node_id != NULL) {
    set_has_src_node_id();
  } else {
    clear_has_src_node_id();
  }
  src_node_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), src_node_id);
  // @@protoc_insertion_point(field_set_allocated:top.transport.protobuf.RoutingMessage.src_node_id)
}

// optional bytes des_node_id = 2;
inline bool RoutingMessage::has_des_node_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoutingMessage::set_has_des_node_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoutingMessage::clear_has_des_node_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoutingMessage::clear_des_node_id() {
  des_node_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_des_node_id();
}
inline const ::std::string& RoutingMessage::des_node_id() const {
  // @@protoc_insertion_point(field_get:top.transport.protobuf.RoutingMessage.des_node_id)
  return des_node_id_.GetNoArena();
}
inline void RoutingMessage::set_des_node_id(const ::std::string& value) {
  set_has_des_node_id();
  des_node_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:top.transport.protobuf.RoutingMessage.des_node_id)
}
#if LANG_CXX11
inline void RoutingMessage::set_des_node_id(::std::string&& value) {
  set_has_des_node_id();
  des_node_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:top.transport.protobuf.RoutingMessage.des_node_id)
}
#endif
inline void RoutingMessage::set_des_node_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_des_node_id();
  des_node_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:top.transport.protobuf.RoutingMessage.des_node_id)
}
inline void RoutingMessage::set_des_node_id(const void* value, size_t size) {
  set_has_des_node_id();
  des_node_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:top.transport.protobuf.RoutingMessage.des_node_id)
}
inline ::std::string* RoutingMessage::mutable_des_node_id() {
  set_has_des_node_id();
  // @@protoc_insertion_point(field_mutable:top.transport.protobuf.RoutingMessage.des_node_id)
  return des_node_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RoutingMessage::release_des_node_id() {
  // @@protoc_insertion_point(field_release:top.transport.protobuf.RoutingMessage.des_node_id)
  if (!has_des_node_id()) {
    return NULL;
  }
  clear_has_des_node_id();
  return des_node_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RoutingMessage::set_allocated_des_node_id(::std::string* des_node_id) {
  if (des_node_id != NULL) {
    set_has_des_node_id();
  } else {
    clear_has_des_node_id();
  }
  des_node_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), des_node_id);
  // @@protoc_insertion_point(field_set_allocated:top.transport.protobuf.RoutingMessage.des_node_id)
}

// optional int32 type = 3;
inline bool RoutingMessage::has_type() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RoutingMessage::set_has_type() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RoutingMessage::clear_has_type() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RoutingMessage::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 RoutingMessage::type() const {
  // @@protoc_insertion_point(field_get:top.transport.protobuf.RoutingMessage.type)
  return type_;
}
inline void RoutingMessage::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:top.transport.protobuf.RoutingMessage.type)
}

// optional bytes data = 4;
inline bool RoutingMessage::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RoutingMessage::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RoutingMessage::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RoutingMessage::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
inline const ::std::string& RoutingMessage::data() const {
  // @@protoc_insertion_point(field_get:top.transport.protobuf.RoutingMessage.data)
  return data_.GetNoArena();
}
inline void RoutingMessage::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:top.transport.protobuf.RoutingMessage.data)
}
#if LANG_CXX11
inline void RoutingMessage::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:top.transport.protobuf.RoutingMessage.data)
}
#endif
inline void RoutingMessage::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:top.transport.protobuf.RoutingMessage.data)
}
inline void RoutingMessage::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:top.transport.protobuf.RoutingMessage.data)
}
inline ::std::string* RoutingMessage::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:top.transport.protobuf.RoutingMessage.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RoutingMessage::release_data() {
  // @@protoc_insertion_point(field_release:top.transport.protobuf.RoutingMessage.data)
  if (!has_data()) {
    return NULL;
  }
  clear_has_data();
  return data_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RoutingMessage::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:top.transport.protobuf.RoutingMessage.data)
}

// optional uint32 id = 5;
inline bool RoutingMessage::has_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RoutingMessage::set_has_id() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RoutingMessage::clear_has_id() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RoutingMessage::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 RoutingMessage::id() const {
  // @@protoc_insertion_point(field_get:top.transport.protobuf.RoutingMessage.id)
  return id_;
}
inline void RoutingMessage::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:top.transport.protobuf.RoutingMessage.id)
}

// optional uint32 ack_id = 6;
inline bool RoutingMessage::has_ack_id() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RoutingMessage::set_has_ack_id() {
  _has_bits_[0] |= 0x00000800u;
}
inline void RoutingMessage::clear_has_ack_id() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void RoutingMessage::clear_ack_id() {
  ack_id_ = 0u;
  clear_has_ack_id();
}
inline ::google::protobuf::uint32 RoutingMessage::ack_id() const {
  // @@protoc_insertion_point(field_get:top.transport.protobuf.RoutingMessage.ack_id)
  return ack_id_;
}
inline void RoutingMessage::set_ack_id(::google::protobuf::uint32 value) {
  set_has_ack_id();
  ack_id_ = value;
  // @@protoc_insertion_point(field_set:top.transport.protobuf.RoutingMessage.ack_id)
}

// optional uint32 hop_num = 7;
inline bool RoutingMessage::has_hop_num() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void RoutingMessage::set_has_hop_num() {
  _has_bits_[0] |= 0x00001000u;
}
inline void RoutingMessage::clear_has_hop_num() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void RoutingMessage::clear_hop_num() {
  hop_num_ = 0u;
  clear_has_hop_num();
}
inline ::google::protobuf::uint32 RoutingMessage::hop_num() const {
  // @@protoc_insertion_point(field_get:top.transport.protobuf.RoutingMessage.hop_num)
  return hop_num_;
}
inline void RoutingMessage::set_hop_num(::google::protobuf::uint32 value) {
  set_has_hop_num();
  hop_num_ = value;
  // @@protoc_insertion_point(field_set:top.transport.protobuf.RoutingMessage.hop_num)
}

// repeated .top.transport.protobuf.HopInfo hop_nodes = 8;
inline int RoutingMessage::hop_nodes_size() const {
  return hop_nodes_.size();
}
inline void RoutingMessage::clear_hop_nodes() {
  hop_nodes_.Clear();
}
inline ::top::transport::protobuf::HopInfo* RoutingMessage::mutable_hop_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:top.transport.protobuf.RoutingMessage.hop_nodes)
  return hop_nodes_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::top::transport::protobuf::HopInfo >*
RoutingMessage::mutable_hop_nodes() {
  // @@protoc_insertion_point(field_mutable_list:top.transport.protobuf.RoutingMessage.hop_nodes)
  return &hop_nodes_;
}
inline const ::top::transport::protobuf::HopInfo& RoutingMessage::hop_nodes(int index) const {
  // @@protoc_insertion_point(field_get:top.transport.protobuf.RoutingMessage.hop_nodes)
  return hop_nodes_.Get(index);
}
inline ::top::transport::protobuf::HopInfo* RoutingMessage::add_hop_nodes() {
  // @@protoc_insertion_point(field_add:top.transport.protobuf.RoutingMessage.hop_nodes)
  return hop_nodes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::top::transport::protobuf::HopInfo >&
RoutingMessage::hop_nodes() const {
  // @@protoc_insertion_point(field_list:top.transport.protobuf.RoutingMessage.hop_nodes)
  return hop_nodes_;
}

// optional int32 retry = 9;
inline bool RoutingMessage::has_retry() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void RoutingMessage::set_has_retry() {
  _has_bits_[0] |= 0x00002000u;
}
inline void RoutingMessage::clear_has_retry() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void RoutingMessage::clear_retry() {
  retry_ = 0;
  clear_has_retry();
}
inline ::google::protobuf::int32 RoutingMessage::retry() const {
  // @@protoc_insertion_point(field_get:top.transport.protobuf.RoutingMessage.retry)
  return retry_;
}
inline void RoutingMessage::set_retry(::google::protobuf::int32 value) {
  set_has_retry();
  retry_ = value;
  // @@protoc_insertion_point(field_set:top.transport.protobuf.RoutingMessage.retry)
}

// optional bool client_msg = 10;
inline bool RoutingMessage::has_client_msg() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void RoutingMessage::set_has_client_msg() {
  _has_bits_[0] |= 0x00004000u;
}
inline void RoutingMessage::clear_has_client_msg() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void RoutingMessage::clear_client_msg() {
  client_msg_ = false;
  clear_has_client_msg();
}
inline bool RoutingMessage::client_msg() const {
  // @@protoc_insertion_point(field_get:top.transport.protobuf.RoutingMessage.client_msg)
  return client_msg_;
}
inline void RoutingMessage::set_client_msg(bool value) {
  set_has_client_msg();
  client_msg_ = value;
  // @@protoc_insertion_point(field_set:top.transport.protobuf.RoutingMessage.client_msg)
}

// optional bool relay_flag = 11;
inline bool RoutingMessage::has_relay_flag() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void RoutingMessage::set_has_relay_flag() {
  _has_bits_[0] |= 0x00008000u;
}
inline void RoutingMessage::clear_has_relay_flag() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void RoutingMessage::clear_relay_flag() {
  relay_flag_ = false;
  clear_has_relay_flag();
}
inline bool RoutingMessage::relay_flag() const {
  // @@protoc_insertion_point(field_get:top.transport.protobuf.RoutingMessage.relay_flag)
  return relay_flag_;
}
inline void RoutingMessage::set_relay_flag(bool value) {
  set_has_relay_flag();
  relay_flag_ = value;
  // @@protoc_insertion_point(field_set:top.transport.protobuf.RoutingMessage.relay_flag)
}

// optional bool request_type = 12;
inline bool RoutingMessage::has_request_type() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void RoutingMessage::set_has_request_type() {
  _has_bits_[0] |= 0x00010000u;
}
inline void RoutingMessage::clear_has_request_type() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void RoutingMessage::clear_request_type() {
  request_type_ = false;
  clear_has_request_type();
}
inline bool RoutingMessage::request_type() const {
  // @@protoc_insertion_point(field_get:top.transport.protobuf.RoutingMessage.request_type)
  return request_type_;
}
inline void RoutingMessage::set_request_type(bool value) {
  set_has_request_type();
  request_type_ = value;
  // @@protoc_insertion_point(field_set:top.transport.protobuf.RoutingMessage.request_type)
}

// optional bytes client_id = 13;
inline bool RoutingMessage::has_client_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RoutingMessage::set_has_client_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RoutingMessage::clear_has_client_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RoutingMessage::clear_client_id() {
  client_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_client_id();
}
inline const ::std::string& RoutingMessage::client_id() const {
  // @@protoc_insertion_point(field_get:top.transport.protobuf.RoutingMessage.client_id)
  return client_id_.GetNoArena();
}
inline void RoutingMessage::set_client_id(const ::std::string& value) {
  set_has_client_id();
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:top.transport.protobuf.RoutingMessage.client_id)
}
#if LANG_CXX11
inline void RoutingMessage::set_client_id(::std::string&& value) {
  set_has_client_id();
  client_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:top.transport.protobuf.RoutingMessage.client_id)
}
#endif
inline void RoutingMessage::set_client_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_client_id();
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:top.transport.protobuf.RoutingMessage.client_id)
}
inline void RoutingMessage::set_client_id(const void* value, size_t size) {
  set_has_client_id();
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:top.transport.protobuf.RoutingMessage.client_id)
}
inline ::std::string* RoutingMessage::mutable_client_id() {
  set_has_client_id();
  // @@protoc_insertion_point(field_mutable:top.transport.protobuf.RoutingMessage.client_id)
  return client_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RoutingMessage::release_client_id() {
  // @@protoc_insertion_point(field_release:top.transport.protobuf.RoutingMessage.client_id)
  if (!has_client_id()) {
    return NULL;
  }
  clear_has_client_id();
  return client_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RoutingMessage::set_allocated_client_id(::std::string* client_id) {
  if (client_id != NULL) {
    set_has_client_id();
  } else {
    clear_has_client_id();
  }
  client_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_id);
  // @@protoc_insertion_point(field_set_allocated:top.transport.protobuf.RoutingMessage.client_id)
}

// optional bool direct_mode = 14;
inline bool RoutingMessage::has_direct_mode() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void RoutingMessage::set_has_direct_mode() {
  _has_bits_[0] |= 0x00020000u;
}
inline void RoutingMessage::clear_has_direct_mode() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void RoutingMessage::clear_direct_mode() {
  direct_mode_ = false;
  clear_has_direct_mode();
}
inline bool RoutingMessage::direct_mode() const {
  // @@protoc_insertion_point(field_get:top.transport.protobuf.RoutingMessage.direct_mode)
  return direct_mode_;
}
inline void RoutingMessage::set_direct_mode(bool value) {
  set_has_direct_mode();
  direct_mode_ = value;
  // @@protoc_insertion_point(field_set:top.transport.protobuf.RoutingMessage.direct_mode)
}

// optional uint64 src_service_type = 15;
inline bool RoutingMessage::has_src_service_type() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void RoutingMessage::set_has_src_service_type() {
  _has_bits_[0] |= 0x00040000u;
}
inline void RoutingMessage::clear_has_src_service_type() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void RoutingMessage::clear_src_service_type() {
  src_service_type_ = GOOGLE_ULONGLONG(0);
  clear_has_src_service_type();
}
inline ::google::protobuf::uint64 RoutingMessage::src_service_type() const {
  // @@protoc_insertion_point(field_get:top.transport.protobuf.RoutingMessage.src_service_type)
  return src_service_type_;
}
inline void RoutingMessage::set_src_service_type(::google::protobuf::uint64 value) {
  set_has_src_service_type();
  src_service_type_ = value;
  // @@protoc_insertion_point(field_set:top.transport.protobuf.RoutingMessage.src_service_type)
}

// optional uint64 des_service_type = 16;
inline bool RoutingMessage::has_des_service_type() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void RoutingMessage::set_has_des_service_type() {
  _has_bits_[0] |= 0x00080000u;
}
inline void RoutingMessage::clear_has_des_service_type() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void RoutingMessage::clear_des_service_type() {
  des_service_type_ = GOOGLE_ULONGLONG(0);
  clear_has_des_service_type();
}
inline ::google::protobuf::uint64 RoutingMessage::des_service_type() const {
  // @@protoc_insertion_point(field_get:top.transport.protobuf.RoutingMessage.des_service_type)
  return des_service_type_;
}
inline void RoutingMessage::set_des_service_type(::google::protobuf::uint64 value) {
  set_has_des_service_type();
  des_service_type_ = value;
  // @@protoc_insertion_point(field_set:top.transport.protobuf.RoutingMessage.des_service_type)
}

// optional uint32 status = 17;
inline bool RoutingMessage::has_status() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void RoutingMessage::set_has_status() {
  _has_bits_[0] |= 0x00100000u;
}
inline void RoutingMessage::clear_has_status() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void RoutingMessage::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 RoutingMessage::status() const {
  // @@protoc_insertion_point(field_get:top.transport.protobuf.RoutingMessage.status)
  return status_;
}
inline void RoutingMessage::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:top.transport.protobuf.RoutingMessage.status)
}

// optional .top.transport.protobuf.VersionTag version_tag = 18;
inline bool RoutingMessage::has_version_tag() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RoutingMessage::set_has_version_tag() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RoutingMessage::clear_has_version_tag() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RoutingMessage::clear_version_tag() {
  if (version_tag_ != NULL) version_tag_->Clear();
  clear_has_version_tag();
}
inline const ::top::transport::protobuf::VersionTag& RoutingMessage::_internal_version_tag() const {
  return *version_tag_;
}
inline const ::top::transport::protobuf::VersionTag& RoutingMessage::version_tag() const {
  const ::top::transport::protobuf::VersionTag* p = version_tag_;
  // @@protoc_insertion_point(field_get:top.transport.protobuf.RoutingMessage.version_tag)
  return p != NULL ? *p : *reinterpret_cast<const ::top::transport::protobuf::VersionTag*>(
      &::top::transport::protobuf::_VersionTag_default_instance_);
}
inline ::top::transport::protobuf::VersionTag* RoutingMessage::release_version_tag() {
  // @@protoc_insertion_point(field_release:top.transport.protobuf.RoutingMessage.version_tag)
  clear_has_version_tag();
  ::top::transport::protobuf::VersionTag* temp = version_tag_;
  version_tag_ = NULL;
  return temp;
}
inline ::top::transport::protobuf::VersionTag* RoutingMessage::mutable_version_tag() {
  set_has_version_tag();
  if (version_tag_ == NULL) {
    auto* p = CreateMaybeMessage<::top::transport::protobuf::VersionTag>(GetArenaNoVirtual());
    version_tag_ = p;
  }
  // @@protoc_insertion_point(field_mutable:top.transport.protobuf.RoutingMessage.version_tag)
  return version_tag_;
}
inline void RoutingMessage::set_allocated_version_tag(::top::transport::protobuf::VersionTag* version_tag) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete version_tag_;
  }
  if (version_tag) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      version_tag = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, version_tag, submessage_arena);
    }
    set_has_version_tag();
  } else {
    clear_has_version_tag();
  }
  version_tag_ = version_tag;
  // @@protoc_insertion_point(field_set_allocated:top.transport.protobuf.RoutingMessage.version_tag)
}

// optional bool is_root = 19;
inline bool RoutingMessage::has_is_root() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void RoutingMessage::set_has_is_root() {
  _has_bits_[0] |= 0x00400000u;
}
inline void RoutingMessage::clear_has_is_root() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void RoutingMessage::clear_is_root() {
  is_root_ = false;
  clear_has_is_root();
}
inline bool RoutingMessage::is_root() const {
  // @@protoc_insertion_point(field_get:top.transport.protobuf.RoutingMessage.is_root)
  return is_root_;
}
inline void RoutingMessage::set_is_root(bool value) {
  set_has_is_root();
  is_root_ = value;
  // @@protoc_insertion_point(field_set:top.transport.protobuf.RoutingMessage.is_root)
}

// repeated uint64 bloomfilter = 20;
inline int RoutingMessage::bloomfilter_size() const {
  return bloomfilter_.size();
}
inline void RoutingMessage::clear_bloomfilter() {
  bloomfilter_.Clear();
}
inline ::google::protobuf::uint64 RoutingMessage::bloomfilter(int index) const {
  // @@protoc_insertion_point(field_get:top.transport.protobuf.RoutingMessage.bloomfilter)
  return bloomfilter_.Get(index);
}
inline void RoutingMessage::set_bloomfilter(int index, ::google::protobuf::uint64 value) {
  bloomfilter_.Set(index, value);
  // @@protoc_insertion_point(field_set:top.transport.protobuf.RoutingMessage.bloomfilter)
}
inline void RoutingMessage::add_bloomfilter(::google::protobuf::uint64 value) {
  bloomfilter_.Add(value);
  // @@protoc_insertion_point(field_add:top.transport.protobuf.RoutingMessage.bloomfilter)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
RoutingMessage::bloomfilter() const {
  // @@protoc_insertion_point(field_list:top.transport.protobuf.RoutingMessage.bloomfilter)
  return bloomfilter_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
RoutingMessage::mutable_bloomfilter() {
  // @@protoc_insertion_point(field_mutable_list:top.transport.protobuf.RoutingMessage.bloomfilter)
  return &bloomfilter_;
}

// repeated .top.transport.protobuf.RelayHopInfo relay_hop_info = 21;
inline int RoutingMessage::relay_hop_info_size() const {
  return relay_hop_info_.size();
}
inline void RoutingMessage::clear_relay_hop_info() {
  relay_hop_info_.Clear();
}
inline ::top::transport::protobuf::RelayHopInfo* RoutingMessage::mutable_relay_hop_info(int index) {
  // @@protoc_insertion_point(field_mutable:top.transport.protobuf.RoutingMessage.relay_hop_info)
  return relay_hop_info_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::top::transport::protobuf::RelayHopInfo >*
RoutingMessage::mutable_relay_hop_info() {
  // @@protoc_insertion_point(field_mutable_list:top.transport.protobuf.RoutingMessage.relay_hop_info)
  return &relay_hop_info_;
}
inline const ::top::transport::protobuf::RelayHopInfo& RoutingMessage::relay_hop_info(int index) const {
  // @@protoc_insertion_point(field_get:top.transport.protobuf.RoutingMessage.relay_hop_info)
  return relay_hop_info_.Get(index);
}
inline ::top::transport::protobuf::RelayHopInfo* RoutingMessage::add_relay_hop_info() {
  // @@protoc_insertion_point(field_add:top.transport.protobuf.RoutingMessage.relay_hop_info)
  return relay_hop_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::top::transport::protobuf::RelayHopInfo >&
RoutingMessage::relay_hop_info() const {
  // @@protoc_insertion_point(field_list:top.transport.protobuf.RoutingMessage.relay_hop_info)
  return relay_hop_info_;
}

// optional bool multi_relay = 22;
inline bool RoutingMessage::has_multi_relay() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void RoutingMessage::set_has_multi_relay() {
  _has_bits_[0] |= 0x00800000u;
}
inline void RoutingMessage::clear_has_multi_relay() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void RoutingMessage::clear_multi_relay() {
  multi_relay_ = false;
  clear_has_multi_relay();
}
inline bool RoutingMessage::multi_relay() const {
  // @@protoc_insertion_point(field_get:top.transport.protobuf.RoutingMessage.multi_relay)
  return multi_relay_;
}
inline void RoutingMessage::set_multi_relay(bool value) {
  set_has_multi_relay();
  multi_relay_ = value;
  // @@protoc_insertion_point(field_set:top.transport.protobuf.RoutingMessage.multi_relay)
}

// optional uint32 seq = 23;
inline bool RoutingMessage::has_seq() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void RoutingMessage::set_has_seq() {
  _has_bits_[0] |= 0x00200000u;
}
inline void RoutingMessage::clear_has_seq() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void RoutingMessage::clear_seq() {
  seq_ = 0u;
  clear_has_seq();
}
inline ::google::protobuf::uint32 RoutingMessage::seq() const {
  // @@protoc_insertion_point(field_get:top.transport.protobuf.RoutingMessage.seq)
  return seq_;
}
inline void RoutingMessage::set_seq(::google::protobuf::uint32 value) {
  set_has_seq();
  seq_ = value;
  // @@protoc_insertion_point(field_set:top.transport.protobuf.RoutingMessage.seq)
}

// optional bytes xrequest_id = 24;
inline bool RoutingMessage::has_xrequest_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RoutingMessage::set_has_xrequest_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RoutingMessage::clear_has_xrequest_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RoutingMessage::clear_xrequest_id() {
  xrequest_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_xrequest_id();
}
inline const ::std::string& RoutingMessage::xrequest_id() const {
  // @@protoc_insertion_point(field_get:top.transport.protobuf.RoutingMessage.xrequest_id)
  return xrequest_id_.GetNoArena();
}
inline void RoutingMessage::set_xrequest_id(const ::std::string& value) {
  set_has_xrequest_id();
  xrequest_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:top.transport.protobuf.RoutingMessage.xrequest_id)
}
#if LANG_CXX11
inline void RoutingMessage::set_xrequest_id(::std::string&& value) {
  set_has_xrequest_id();
  xrequest_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:top.transport.protobuf.RoutingMessage.xrequest_id)
}
#endif
inline void RoutingMessage::set_xrequest_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_xrequest_id();
  xrequest_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:top.transport.protobuf.RoutingMessage.xrequest_id)
}
inline void RoutingMessage::set_xrequest_id(const void* value, size_t size) {
  set_has_xrequest_id();
  xrequest_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:top.transport.protobuf.RoutingMessage.xrequest_id)
}
inline ::std::string* RoutingMessage::mutable_xrequest_id() {
  set_has_xrequest_id();
  // @@protoc_insertion_point(field_mutable:top.transport.protobuf.RoutingMessage.xrequest_id)
  return xrequest_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RoutingMessage::release_xrequest_id() {
  // @@protoc_insertion_point(field_release:top.transport.protobuf.RoutingMessage.xrequest_id)
  if (!has_xrequest_id()) {
    return NULL;
  }
  clear_has_xrequest_id();
  return xrequest_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RoutingMessage::set_allocated_xrequest_id(::std::string* xrequest_id) {
  if (xrequest_id != NULL) {
    set_has_xrequest_id();
  } else {
    clear_has_xrequest_id();
  }
  xrequest_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), xrequest_id);
  // @@protoc_insertion_point(field_set_allocated:top.transport.protobuf.RoutingMessage.xrequest_id)
}

// repeated bytes trace_route = 25;
inline int RoutingMessage::trace_route_size() const {
  return trace_route_.size();
}
inline void RoutingMessage::clear_trace_route() {
  trace_route_.Clear();
}
inline const ::std::string& RoutingMessage::trace_route(int index) const {
  // @@protoc_insertion_point(field_get:top.transport.protobuf.RoutingMessage.trace_route)
  return trace_route_.Get(index);
}
inline ::std::string* RoutingMessage::mutable_trace_route(int index) {
  // @@protoc_insertion_point(field_mutable:top.transport.protobuf.RoutingMessage.trace_route)
  return trace_route_.Mutable(index);
}
inline void RoutingMessage::set_trace_route(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:top.transport.protobuf.RoutingMessage.trace_route)
  trace_route_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void RoutingMessage::set_trace_route(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:top.transport.protobuf.RoutingMessage.trace_route)
  trace_route_.Mutable(index)->assign(std::move(value));
}
#endif
inline void RoutingMessage::set_trace_route(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  trace_route_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:top.transport.protobuf.RoutingMessage.trace_route)
}
inline void RoutingMessage::set_trace_route(int index, const void* value, size_t size) {
  trace_route_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:top.transport.protobuf.RoutingMessage.trace_route)
}
inline ::std::string* RoutingMessage::add_trace_route() {
  // @@protoc_insertion_point(field_add_mutable:top.transport.protobuf.RoutingMessage.trace_route)
  return trace_route_.Add();
}
inline void RoutingMessage::add_trace_route(const ::std::string& value) {
  trace_route_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:top.transport.protobuf.RoutingMessage.trace_route)
}
#if LANG_CXX11
inline void RoutingMessage::add_trace_route(::std::string&& value) {
  trace_route_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:top.transport.protobuf.RoutingMessage.trace_route)
}
#endif
inline void RoutingMessage::add_trace_route(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  trace_route_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:top.transport.protobuf.RoutingMessage.trace_route)
}
inline void RoutingMessage::add_trace_route(const void* value, size_t size) {
  trace_route_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:top.transport.protobuf.RoutingMessage.trace_route)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
RoutingMessage::trace_route() const {
  // @@protoc_insertion_point(field_list:top.transport.protobuf.RoutingMessage.trace_route)
  return trace_route_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
RoutingMessage::mutable_trace_route() {
  // @@protoc_insertion_point(field_mutable_list:top.transport.protobuf.RoutingMessage.trace_route)
  return &trace_route_;
}

// optional bytes xid = 26;
inline bool RoutingMessage::has_xid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RoutingMessage::set_has_xid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RoutingMessage::clear_has_xid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RoutingMessage::clear_xid() {
  xid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_xid();
}
inline const ::std::string& RoutingMessage::xid() const {
  // @@protoc_insertion_point(field_get:top.transport.protobuf.RoutingMessage.xid)
  return xid_.GetNoArena();
}
inline void RoutingMessage::set_xid(const ::std::string& value) {
  set_has_xid();
  xid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:top.transport.protobuf.RoutingMessage.xid)
}
#if LANG_CXX11
inline void RoutingMessage::set_xid(::std::string&& value) {
  set_has_xid();
  xid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:top.transport.protobuf.RoutingMessage.xid)
}
#endif
inline void RoutingMessage::set_xid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_xid();
  xid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:top.transport.protobuf.RoutingMessage.xid)
}
inline void RoutingMessage::set_xid(const void* value, size_t size) {
  set_has_xid();
  xid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:top.transport.protobuf.RoutingMessage.xid)
}
inline ::std::string* RoutingMessage::mutable_xid() {
  set_has_xid();
  // @@protoc_insertion_point(field_mutable:top.transport.protobuf.RoutingMessage.xid)
  return xid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RoutingMessage::release_xid() {
  // @@protoc_insertion_point(field_release:top.transport.protobuf.RoutingMessage.xid)
  if (!has_xid()) {
    return NULL;
  }
  clear_has_xid();
  return xid_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RoutingMessage::set_allocated_xid(::std::string* xid) {
  if (xid != NULL) {
    set_has_xid();
  } else {
    clear_has_xid();
  }
  xid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), xid);
  // @@protoc_insertion_point(field_set_allocated:top.transport.protobuf.RoutingMessage.xid)
}

// optional bool broadcast = 27;
inline bool RoutingMessage::has_broadcast() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void RoutingMessage::set_has_broadcast() {
  _has_bits_[0] |= 0x01000000u;
}
inline void RoutingMessage::clear_has_broadcast() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void RoutingMessage::clear_broadcast() {
  broadcast_ = false;
  clear_has_broadcast();
}
inline bool RoutingMessage::broadcast() const {
  // @@protoc_insertion_point(field_get:top.transport.protobuf.RoutingMessage.broadcast)
  return broadcast_;
}
inline void RoutingMessage::set_broadcast(bool value) {
  set_has_broadcast();
  broadcast_ = value;
  // @@protoc_insertion_point(field_set:top.transport.protobuf.RoutingMessage.broadcast)
}

// optional uint32 priority = 28;
inline bool RoutingMessage::has_priority() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void RoutingMessage::set_has_priority() {
  _has_bits_[0] |= 0x04000000u;
}
inline void RoutingMessage::clear_has_priority() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void RoutingMessage::clear_priority() {
  priority_ = 0u;
  clear_has_priority();
}
inline ::google::protobuf::uint32 RoutingMessage::priority() const {
  // @@protoc_insertion_point(field_get:top.transport.protobuf.RoutingMessage.priority)
  return priority_;
}
inline void RoutingMessage::set_priority(::google::protobuf::uint32 value) {
  set_has_priority();
  priority_ = value;
  // @@protoc_insertion_point(field_set:top.transport.protobuf.RoutingMessage.priority)
}

// optional .top.transport.protobuf.GossipParams gossip = 29;
inline bool RoutingMessage::has_gossip() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RoutingMessage::set_has_gossip() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RoutingMessage::clear_has_gossip() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RoutingMessage::clear_gossip() {
  if (gossip_ != NULL) gossip_->Clear();
  clear_has_gossip();
}
inline const ::top::transport::protobuf::GossipParams& RoutingMessage::_internal_gossip() const {
  return *gossip_;
}
inline const ::top::transport::protobuf::GossipParams& RoutingMessage::gossip() const {
  const ::top::transport::protobuf::GossipParams* p = gossip_;
  // @@protoc_insertion_point(field_get:top.transport.protobuf.RoutingMessage.gossip)
  return p != NULL ? *p : *reinterpret_cast<const ::top::transport::protobuf::GossipParams*>(
      &::top::transport::protobuf::_GossipParams_default_instance_);
}
inline ::top::transport::protobuf::GossipParams* RoutingMessage::release_gossip() {
  // @@protoc_insertion_point(field_release:top.transport.protobuf.RoutingMessage.gossip)
  clear_has_gossip();
  ::top::transport::protobuf::GossipParams* temp = gossip_;
  gossip_ = NULL;
  return temp;
}
inline ::top::transport::protobuf::GossipParams* RoutingMessage::mutable_gossip() {
  set_has_gossip();
  if (gossip_ == NULL) {
    auto* p = CreateMaybeMessage<::top::transport::protobuf::GossipParams>(GetArenaNoVirtual());
    gossip_ = p;
  }
  // @@protoc_insertion_point(field_mutable:top.transport.protobuf.RoutingMessage.gossip)
  return gossip_;
}
inline void RoutingMessage::set_allocated_gossip(::top::transport::protobuf::GossipParams* gossip) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete gossip_;
  }
  if (gossip) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      gossip = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, gossip, submessage_arena);
    }
    set_has_gossip();
  } else {
    clear_has_gossip();
  }
  gossip_ = gossip;
  // @@protoc_insertion_point(field_set_allocated:top.transport.protobuf.RoutingMessage.gossip)
}

// optional bool enable_ack = 30;
inline bool RoutingMessage::has_enable_ack() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void RoutingMessage::set_has_enable_ack() {
  _has_bits_[0] |= 0x02000000u;
}
inline void RoutingMessage::clear_has_enable_ack() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void RoutingMessage::clear_enable_ack() {
  enable_ack_ = false;
  clear_has_enable_ack();
}
inline bool RoutingMessage::enable_ack() const {
  // @@protoc_insertion_point(field_get:top.transport.protobuf.RoutingMessage.enable_ack)
  return enable_ack_;
}
inline void RoutingMessage::set_enable_ack(bool value) {
  set_has_enable_ack();
  enable_ack_ = value;
  // @@protoc_insertion_point(field_set:top.transport.protobuf.RoutingMessage.enable_ack)
}

// optional string debug = 31;
inline bool RoutingMessage::has_debug() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RoutingMessage::set_has_debug() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RoutingMessage::clear_has_debug() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RoutingMessage::clear_debug() {
  debug_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_debug();
}
inline const ::std::string& RoutingMessage::debug() const {
  // @@protoc_insertion_point(field_get:top.transport.protobuf.RoutingMessage.debug)
  return debug_.GetNoArena();
}
inline void RoutingMessage::set_debug(const ::std::string& value) {
  set_has_debug();
  debug_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:top.transport.protobuf.RoutingMessage.debug)
}
#if LANG_CXX11
inline void RoutingMessage::set_debug(::std::string&& value) {
  set_has_debug();
  debug_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:top.transport.protobuf.RoutingMessage.debug)
}
#endif
inline void RoutingMessage::set_debug(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_debug();
  debug_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:top.transport.protobuf.RoutingMessage.debug)
}
inline void RoutingMessage::set_debug(const char* value, size_t size) {
  set_has_debug();
  debug_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:top.transport.protobuf.RoutingMessage.debug)
}
inline ::std::string* RoutingMessage::mutable_debug() {
  set_has_debug();
  // @@protoc_insertion_point(field_mutable:top.transport.protobuf.RoutingMessage.debug)
  return debug_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RoutingMessage::release_debug() {
  // @@protoc_insertion_point(field_release:top.transport.protobuf.RoutingMessage.debug)
  if (!has_debug()) {
    return NULL;
  }
  clear_has_debug();
  return debug_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RoutingMessage::set_allocated_debug(::std::string* debug) {
  if (debug != NULL) {
    set_has_debug();
  } else {
    clear_has_debug();
  }
  debug_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), debug);
  // @@protoc_insertion_point(field_set_allocated:top.transport.protobuf.RoutingMessage.debug)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace transport
}  // namespace top

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_transport_2eproto
